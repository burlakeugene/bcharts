{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://bcharts/webpack/universalModuleDefinition","webpack://bcharts/./src/Chart/extensions.js","webpack://bcharts/webpack/bootstrap","webpack://bcharts/webpack/runtime/define property getters","webpack://bcharts/webpack/runtime/hasOwnProperty shorthand","webpack://bcharts/webpack/runtime/make namespace object","webpack://bcharts/./src/Chart/common.js","webpack://bcharts/./src/Chart/modules/Plot/defaultSettings.js","webpack://bcharts/./src/Chart/modules/commonDefaultSettings.js","webpack://bcharts/./src/Chart/modules/chart.js","webpack://bcharts/./src/Chart/modules/Plot/index.js","webpack://bcharts/./src/Chart/modules/Slice/defaultSettings.js","webpack://bcharts/./src/Chart/modules/Slice/index.js","webpack://bcharts/./src/Chart/modules/Donut/index.js","webpack://bcharts/./src/Chart/modules/Pie/index.js","webpack://bcharts/./src/Chart/modules/Radar/defaultSettings.js","webpack://bcharts/./src/Chart/modules/Radar/index.js","webpack://bcharts/./src/Chart/modules/Funnel/defaultSettings.js","webpack://bcharts/./src/Chart/modules/Funnel/index.js","webpack://bcharts/./src/Chart/modules/Spectr/defaultSettings.js","webpack://bcharts/./src/Chart/modules/Spectr/index.js","webpack://bcharts/./src/package/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ","Date.prototype.formatting = function (format) {\n  var yyyy = this.getFullYear().toString();\n  format = format.replace(/yyyy/g, yyyy);\n  var mm = (this.getMonth() + 1).toString();\n  format = format.replace(/mm/g, mm[1] ? mm : '0' + mm[0]);\n  var dd = this.getDate().toString();\n  format = format.replace(/dd/g, dd[1] ? dd : '0' + dd[0]);\n  var hh = this.getHours().toString();\n  format = format.replace(/hh/g, hh[1] ? hh : '0' + hh[0]);\n  var ii = this.getMinutes().toString();\n  format = format.replace(/ii/g, ii[1] ? ii : '0' + ii[0]);\n  var ss = this.getSeconds().toString();\n  format = format.replace(/ss/g, ss[1] ? ss : '0' + ss[0]);\n  return format;\n};\n\nCanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {\n  if (w < 2 * r) r = w / 2;\n  if (h < 2 * r) r = h / 2;\n  this.beginPath();\n  this.moveTo(x + r, y);\n  this.arcTo(x + w, y, x + w, y + h, r);\n  this.arcTo(x + w, y + h, x, y + h, r);\n  this.arcTo(x, y + h, x, y, r);\n  this.arcTo(x, y, x + w, y, r);\n  this.closePath();\n  return this;\n};\n\nCanvasRenderingContext2D.prototype.bezierCurveMulti = function (\n  points,\n  tension\n) {\n  tension = tension || 0.25;\n  var l = points.length;\n  if (l < 2) return;\n  if (l == 2) {\n    this.moveTo(points[0][0], points[0][1]);\n    this.lineTo(points[1][0], points[1][1]);\n    return this;\n  }\n  function h(x, y) {\n    return Math.sqrt(x * x + y * y);\n  }\n  var cpoints = [];\n  points.forEach(function () {\n    cpoints.push({});\n  });\n\n  for (var i = 1; i < l - 1; i++) {\n    var pi = points[i],\n      pp = points[i - 1],\n      pn = points[i + 1],\n      rdx = pn[0] - pp[0],\n      rdy = pn[1] - pp[1],\n      rd = h(rdx, rdy),\n      dx = rdx / rd,\n      dy = rdy / rd,\n      dp = h(pi[0] - pp[0], pi[1] - pp[1]),\n      dn = h(pi[0] - pn[0], pi[1] - pn[1]),\n      cpx = pi[0] - dx * dp * tension,\n      cpy = pi[1] - dy * dp * tension,\n      cnx = pi[0] + dx * dn * tension,\n      cny = pi[1] + dy * dn * tension;\n\n    cpoints[i] = {\n      cp: [cpx, cpy],\n      cn: [cnx, cny],\n    };\n  }\n  cpoints[0] = {\n    cn: [\n      (points[0][0] + cpoints[1].cp[0]) / 2,\n      (points[0][1] + cpoints[1].cp[1]) / 2,\n    ],\n  };\n  cpoints[l - 1] = {\n    cp: [\n      (points[l - 1][0] + cpoints[l - 2].cn[0]) / 2,\n      (points[l - 1][1] + cpoints[l - 2].cn[1]) / 2,\n    ],\n  };\n\n  this.moveTo(points[0][0], points[0][1]);\n\n  for (i = 1; i < l; i++) {\n    var p = points[i],\n      cp = cpoints[i],\n      cpp = cpoints[i - 1];\n    this.bezierCurveTo(cpp.cn[0], cpp.cn[1], cp.cp[0], cp.cp[1], p[0], p[1]);\n  }\n  return this;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","function padZero(str, len) {\n  len = len || 2;\n  var zeros = new Array(len).join('0');\n  return (zeros + str).slice(-len);\n}\n\nfunction padToTwo(numberString) {\n  if (numberString.length < 2) {\n    numberString = '0' + numberString;\n  }\n  return numberString;\n}\n\nexport const hexAverage = (colors) => {\n  return colors\n    .reduce(\n      function (previousValue, currentValue) {\n        return currentValue\n          .replace(/^#/, '')\n          .match(/.{2}/g)\n          .map(function (value, index) {\n            return previousValue[index] + parseInt(value, 16);\n          });\n      },\n      [0, 0, 0]\n    )\n    .reduce(function (previousValue, currentValue) {\n      return (\n        previousValue +\n        padToTwo(Math.floor(currentValue / colors.length).toString(16))\n      );\n    }, '#');\n};\n\nexport const generateDate = (time, format = 'hh:ii:ss') => {\n  let result = '';\n  time = new Date(time);\n  result = time.formatting(format);\n  return result;\n};\n\nexport const deepMerge = (obj1, obj2) => {\n  for (var p in obj2) {\n    try {\n      if (obj2[p].constructor == Object) {\n        obj1[p] = deepMerge(obj1[p], obj2[p]);\n      } else {\n        obj1[p] = obj2[p];\n      }\n    } catch (e) {\n      obj1[p] = obj2[p];\n    }\n  }\n  return obj1;\n};\n\nexport const deepClone = (o) => {\n  if (typeof o != 'object') {\n    return o;\n  }\n  if (!o) {\n    return o;\n  }\n  var r = o instanceof Array ? [] : {};\n  for (var i in o) {\n    if (o.hasOwnProperty(i)) {\n      r[i] = deepClone(o[i]);\n    }\n  }\n  return r;\n};\n\nexport const addEventListeners = (element, events, func) => {\n  events.forEach((event) => {\n    element.addEventListener(event, func);\n  });\n};\n\nexport const generateRandomColor = () => {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\nexport const getPointOnArc = (x, y, radius, angle) => {\n  return {\n    x: x + Math.cos(angle) * radius,\n    y: y + Math.sin(angle) * radius,\n  };\n};\n\nexport const colorChangeTone = (color, amount) => {\n  amount = parseInt(amount);\n  return (\n    '#' +\n    color\n      .replace(/^#/, '')\n      .replace(/../g, (color) =>\n        (\n          '0' +\n          Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)\n        ).substr(-2)\n      )\n  );\n};\n\nexport const calcCenterOfPolygon = (points) => {\n  let polygon = points.map((point) => {\n      return [point.x, point.y];\n    }),\n    xs = polygon.map((x) => x[0]),\n    ys = polygon.map((y) => y[1]),\n    cx = (Math.min(...xs) + Math.max(...xs)) / 2,\n    cy = (Math.min(...ys) + Math.max(...ys)) / 2;\n  return {\n    x: cx,\n    y: cy,\n  };\n};\n\nexport const getIntersection = ({ A, B, C, D }) => {\n  let result = {\n    x: 0,\n    y: 0,\n    intersected: false,\n  };\n  if (!A || !B || !C || !D) return result;\n  let d =\n    ((C.x - A.x) * (B.y - A.y) - (B.x - A.x) * (C.y - A.y)) /\n    ((B.x - A.x) * (D.y - C.y) - (D.x - C.x) * (B.y - A.y));\n  result.x = C.x + (D.x - C.x) * d;\n  result.y = C.y + (D.y - C.y) * d;\n  result.intersected = (() => {\n    let v1 = (D.x - C.x) * (A.y - C.y) - (D.y - C.y) * (A.x - C.x),\n      v2 = (D.x - C.x) * (B.y - C.y) - (D.y - C.y) * (B.x - C.x),\n      v3 = (B.x - A.x) * (C.y - A.y) - (B.y - A.y) * (C.x - A.x),\n      v4 = (B.x - A.x) * (D.y - A.y) - (B.y - A.y) * (D.x - A.x);\n    return v1 * v2 < 0 && v3 * v4 < 0;\n  })();\n  return result;\n};\n\nexport const getContrastColor = (hex, bw) => {\n  if (hex.indexOf('#') === 0) {\n    hex = hex.slice(1);\n  }\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n  if (hex.length !== 6) {\n    throw new Error('Invalid HEX color.');\n  }\n  var r = parseInt(hex.slice(0, 2), 16),\n    g = parseInt(hex.slice(2, 4), 16),\n    b = parseInt(hex.slice(4, 6), 16);\n  if (bw) {\n    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#FFFFFF';\n  }\n  r = (255 - r).toString(16);\n  g = (255 - g).toString(16);\n  b = (255 - b).toString(16);\n  return '#' + padZero(r) + padZero(g) + padZero(b);\n};\n\nexport const isFunction = (func) => {\n  return {}.toString.call(func) === '[object Function]';\n};\n\nexport const prepareColor = (color) => {\n  if (color.length === 4) {\n    let nextColor = '#';\n    for (let i = 1; i <= color.length - 1; i++) {\n      nextColor += color[i] + color[i];\n    }\n    color = nextColor;\n  }\n  return color;\n};\n\nexport const intersectionPolygon = ({ x, y, polygon }) => {\n  var inside = false;\n  for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    var xi = polygon[i].x,\n      yi = polygon[i].y;\n    var xj = polygon[j].x,\n      yj = polygon[j].y;\n    var intersect =\n      yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n    if (intersect) inside = !inside;\n  }\n  return inside;\n};\n","export default {\n  offset: {\n    top: 20,\n    right: 20,\n    bottom: 40,\n    left: 60,\n  },\n  grid: {\n    enable: true,\n    offset: {\n      top: 20,\n      right: 0,\n      bottom: 20,\n      left: 0,\n    },\n    styles: {\n      background: '',\n      borderColor: '#2b2a49',\n      borderRadius: 5,\n      borderWidth: 2,\n    },\n    horizontal: {\n      step: 4,\n      enable: true,\n    },\n    vertical: {\n      step: 10,\n      enable: true,\n    },\n  },\n  labels: {\n    enable: true,\n    styles: {\n      color: '#fff',\n      fontSize: 12,\n    },\n  },\n  values: {\n    enable: true,\n    digits: 2,\n    count: 10,\n    styles: {\n      color: '#fff',\n      fontSize: 12,\n    },\n  },\n  data: {\n    enable: true,\n    offset: 0,\n    digits: 2,\n    line: {\n      offset: {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n      },\n      dots: {\n        enable: true,\n        width: 5,\n        hover: {\n          enable: true,\n          width: 3\n        }\n      },\n      styles: {\n        lineWidth: 2,\n      },\n    },\n    bar: {\n      offset: 10,\n      hover: {\n        enable: true,\n        value: 50\n      }\n    }\n  },\n};\n","export default {\n  animated: true,\n  view: {\n    styles: {\n      background: '#1a1e30',\n    },\n  },\n  data: {\n    hover: {\n      enable: true\n    }\n  },\n  tooltip: {\n    enable: true,\n    styles: {\n      color: '#ffffff',\n      background: '#403f4c',\n      borderColor: '#fff',\n      borderWidth: 0,\n      borderRadius: 3,\n      fontSize: 12,\n      padding: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10,\n      },\n    },\n  },\n};\n","import { deepMerge, deepClone, isFunction, colorChangeTone } from '../common';\nimport commonDefaultSettings from './commonDefaultSettings';\nexport default class Chart {\n  constructor(props) {\n    let {\n      canvas = false,\n      data = {},\n      defaultSettings = {},\n      settings = {},\n      actions = {},\n      type,\n    } = props;\n    this.type = type;\n    this.actions = actions;\n    this.canvas = {\n      element: canvas,\n      context: canvas.getContext('2d'),\n      isCanvas:\n        (canvas instanceof Element || canvas instanceof HTMLDocument) &&\n        canvas.tagName.toLowerCase() === 'canvas',\n    };\n    this.cursor = { x: 0, y: 0 };\n    this.settings = deepMerge(\n      deepClone(commonDefaultSettings),\n      deepClone(defaultSettings)\n    );\n    this.timeStamp = +new Date();\n    this.setSettings(settings);\n    this.state = {\n      loading: this.settings.animated ? 0 : 1,\n    };\n    this.data = this.prepareData(data);\n    this.commonInit();\n  }\n  prepareData(data) {\n    return data;\n  }\n  setSettings(newSettings = {}) {\n    deepMerge(this.settings, newSettings);\n    this.render({\n      from: 'setSettings',\n    });\n  }\n  getSettings() {\n    return this.settings;\n  }\n  setData(data) {\n    this.data = this.prepareData(data);\n    this.render({\n      from: 'setData',\n    });\n  }\n  getData() {\n    return this.data;\n  }\n  setRatio() {\n    let { canvas } = this,\n      { context, element } = canvas,\n      ratio = window.devicePixelRatio || 1;\n    element.width = element.clientWidth * ratio;\n    element.height = element.clientHeight * ratio;\n    context.scale(ratio, ratio);\n  }\n  clearCanvas() {\n    let { canvas } = this,\n      { context, element } = canvas;\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  loading() {\n    if (this.state.loading >= 1) return;\n    setTimeout(() => {\n      this.state.loading += 60 / 2000;\n      this.state.loading = this.state.loading > 1 ? 1 : this.state.loading;\n      this.render({\n        from: 'loading',\n      });\n      this.loading();\n    }, 1000 / 60);\n  }\n  commonInit() {\n    this.render({\n      from: 'commonInit',\n    });\n    this.loading();\n    this.commonListeners();\n  }\n  commonListeners() {\n    let { canvas } = this,\n      { context, element } = canvas;\n    window.addEventListener('resize', () => {\n      this.render({\n        from: 'resize',\n      });\n    });\n    element.addEventListener('mousemove', (e) => {\n      let { settings } = this,\n        elementOffset = element.getBoundingClientRect(),\n        x = e.clientX - elementOffset.left,\n        y = e.clientY - elementOffset.top;\n      this.cursor = {\n        x,\n        y,\n      };\n      this.render({\n        from: 'mousemove',\n      });\n    });\n    element.addEventListener('mouseout', (e) => {\n      this.cursor = {\n        x: 0,\n        y: 0,\n      };\n      this.render({\n        from: 'mouseout',\n      });\n    });\n  }\n  drawTooltip({ title = '', panels = [], x, y, render } = {}) {\n    let { canvas, settings, data = [], cursor } = this,\n      { element, context } = canvas,\n      { tooltip } = settings,\n      { styles } = tooltip;\n    if (!x) x = cursor.x;\n    if (!y) y = cursor.y;\n    if (tooltip && tooltip.enable) {\n      context.font = '100 ' + styles.fontSize + 'px arial';\n      context.textAlign = 'left';\n      context.textBaseline = 'middle';\n      let { width, height } = (() => {\n          let width = 0,\n            height = 0;\n          if (title && title.text) {\n            title.width =\n              context.measureText(title.text).width +\n              styles.padding.left +\n              styles.padding.right +\n              styles.borderWidth;\n            title.height =\n              styles.padding.top * 2 +\n              styles.fontSize * 1.286 +\n              styles.borderWidth / 2;\n            title.x = styles.padding.left + styles.borderWidth / 2;\n            title.y = title.height / 2 + styles.borderWidth / 2;\n          } else {\n            title = {\n              width: 0,\n              height: 0,\n            };\n          }\n          if (panels.length) {\n            panels.forEach((panel, index) => {\n              panel.width = 0;\n              panel.height = 0;\n              panel.x = (() => {\n                let prevWidth = 0;\n                for (let i = index - 1; i >= 0; i--) {\n                  prevWidth += panels[i].width;\n                }\n                return prevWidth;\n              })();\n              panel.y = title.height;\n              if (panel.colorPanel && panel.colorPanel.color) {\n                panel.colorPanel.height = 3;\n                panel.colorPanel.x = styles.borderWidth / 2;\n                panel.colorPanel.y = 0;\n                panel.height += panel.colorPanel.height;\n              }\n              if (panel.texts) {\n                panel.texts.forEach((text, index) => {\n                  if (text.text) {\n                    let currentWidth =\n                      context.measureText(text.text).width + styles.borderWidth;\n                    if (panel.width < currentWidth) panel.width = currentWidth;\n                    text.height = styles.fontSize * 1.286;\n                    text.x = styles.padding.left + styles.borderWidth / 2;\n                    text.y = panel.height + text.height / 2;\n                    if (!index) {\n                      text.height += styles.padding.top;\n                      text.y += styles.padding.top;\n                    }\n                    if (index === panel.texts.length - 1) {\n                      text.height += styles.padding.bottom;\n                    }\n                    panel.height += text.height;\n                  }\n                });\n              }\n              if (panel.footer && panel.footer.text) {\n                let currentWidth =\n                  context.measureText(panel.footer.text).width +\n                  styles.borderWidth;\n                if (panel.width < currentWidth) panel.width = currentWidth;\n                panel.footer.height =\n                  styles.padding.bottom + styles.fontSize * 1.286;\n                panel.footer.x = styles.padding.left + styles.borderWidth / 2;\n                panel.footer.y =\n                  panel.height +\n                  panel.footer.height / 2 -\n                  styles.padding.bottom / 2;\n                panel.height += panel.footer.height + styles.borderWidth / 2;\n              }\n              panel.width += styles.padding.left + styles.padding.right;\n            });\n          }\n          let panelsWidth = panels.reduce((acc, panel) => acc + panel.width, 0);\n          if (title.width > panelsWidth) {\n            let panelWidth = title.width / panels.length,\n              minCount = 0,\n              oversizeWidth = 0;\n            for (let i = 0; i <= panels.length - 1; i++) {\n              if (panels[i].width >= panelWidth) {\n                oversizeWidth += panels[i].width - panelWidth;\n              } else {\n                minCount++;\n              }\n            }\n            for (let i = 0; i <= panels.length - 1; i++) {\n              panels[i].width =\n                panels[i].width < panelWidth\n                  ? panelWidth - oversizeWidth / minCount\n                  : panels[i].width;\n              panels[i].x = (() => {\n                let prevWidth = 0;\n                for (let j = i - 1; j >= 0; j--) {\n                  prevWidth += panels[j].width;\n                }\n                return prevWidth;\n              })();\n            }\n          }\n          height =\n            title.height +\n            (panels.length\n              ? Math.max(...panels.map((panel) => panel.height))\n              : 0);\n          width = Math.max(title.width, panelsWidth);\n          return {\n            width,\n            height,\n          };\n        })(),\n        center = x,\n        topOffset = 10,\n        left = x - width / 2,\n        invert = false,\n        top = y - height - topOffset;\n      if (top < styles.borderWidth) {\n        invert = true;\n        top = y + topOffset;\n      }\n      if (left + width > element.clientWidth - styles.borderWidth / 2) {\n        left = element.clientWidth - width - styles.borderWidth / 2;\n      }\n      if (left < styles.borderWidth / 2) left = styles.borderWidth / 2;\n      context.fillStyle = styles.background;\n      context.strokeStyle =\n        styles.borderWidth > 0 ? styles.borderColor : 'transparent';\n      context.lineWidth = styles.borderWidth;\n      context.beginPath();\n      context.roundRect(left, top, width, height, styles.borderRadius);\n      context.closePath();\n      context.fill();\n      context.stroke();\n      if (invert) {\n        context.beginPath();\n        context.moveTo(center - 5, top);\n        context.lineTo(center, top - 5);\n        context.lineTo(center + 5, top);\n        context.fill();\n        context.stroke();\n        context.beginPath();\n        context.moveTo(\n          center - 5 + styles.borderWidth / 4,\n          top + styles.borderWidth / 2\n        );\n        context.lineTo(center, top - 5 + styles.borderWidth / 1.5);\n        context.lineTo(\n          center + 5 - styles.borderWidth / 4,\n          top + styles.borderWidth / 2\n        );\n        context.fill();\n      } else {\n        context.beginPath();\n        context.moveTo(center - 5, top + height);\n        context.lineTo(center, top + height + 5);\n        context.lineTo(center + 5, top + height);\n        context.fill();\n        context.stroke();\n        context.beginPath();\n        context.moveTo(\n          center - 5 + styles.borderWidth / 4,\n          top + height - styles.borderWidth / 2\n        );\n        context.lineTo(center, top + height + 5 - styles.borderWidth / 1.5);\n        context.lineTo(\n          center + 5 - styles.borderWidth / 4,\n          top + height - styles.borderWidth / 2\n        );\n        context.fill();\n      }\n\n      context.fillStyle = styles.color;\n      if (title && title.text) {\n        context.fillText(title.text, left + title.x, top + title.y);\n      }\n      panels.forEach((panel) => {\n        context.fillStyle = styles.color;\n        if (panel.colorPanel && panel.colorPanel.color) {\n          context.save();\n          context.fillStyle = panel.colorPanel.color;\n          context.beginPath();\n          context.rect(\n            left + panel.x + panel.colorPanel.x,\n            top + panel.y + panel.colorPanel.y,\n            panel.width - styles.borderWidth,\n            panel.colorPanel.height\n          );\n          context.fill();\n          context.restore();\n        }\n        if (panel.texts) {\n          panel.texts.forEach((text, i) => {\n            if (text.text) {\n              context.fillText(\n                text.text,\n                left + panel.x + text.x,\n                top + panel.y + text.y\n              );\n            }\n          });\n        }\n        if (panel.footer && panel.footer.text) {\n          context.fillStyle = colorChangeTone(styles.color, -50);\n          context.fillText(\n            panel.footer.text,\n            left + panel.x + panel.footer.x,\n            top + panel.y + panel.footer.y\n          );\n        }\n      });\n      if (render && isFunction(render)) {\n        render({\n          context,\n          styles,\n          box: {\n            width,\n            height,\n            top: top,\n            left: left,\n            bottom: top + height,\n            right: left + width,\n          },\n        });\n      }\n    }\n  }\n  drawBackground() {\n    let { canvas, settings } = this,\n      { view } = settings,\n      { context, element } = canvas,\n      { background } = view.styles;\n    context.fillStyle = background;\n    context.fillRect(0, 0, element.width, element.height);\n  }\n  hover({ item, isHovered }) {\n    let { settings } = this,\n      step = 1 / 20;\n    if (isHovered && settings?.data?.hover?.enable) {\n      if (!item.hasOwnProperty('state')) item.state = 0;\n      let hoveredValue = settings?.data?.hover?.value || 0;\n      if (settings.animated) {\n        if (item.state < 1) {\n          item.state += step;\n          if (item.state > 1) item.state = 1;\n          this.render({\n            from: 'Animated increase state',\n          });\n        }\n      } else {\n        item.state = 1;\n        this.render({\n          from: 'Increase state',\n        });\n      }\n    } else {\n      if (settings.animated) {\n        if (item.state > 0) {\n          item.state -= step;\n          if (item.state < 0) item.state = 0;\n          this.render({\n            from: 'Animated decrease state',\n          });\n        }\n      } else {\n        item.state = 0;\n        this.render({\n          from: 'Decrease state',\n        });\n      }\n    }\n  }\n  baseRender() {\n    this.setRatio();\n    this.clearCanvas();\n    this.drawBackground();\n  }\n}\n","import {\n  generateRandomColor,\n  generateDate,\n  deepMerge,\n  getPointOnArc,\n  colorChangeTone,\n  getContrastColor,\n  prepareColor,\n} from '../../common';\nimport defaultSettings from './defaultSettings';\nimport Chart from '../chart';\n\nexport default class Plot extends Chart {\n  constructor(props) {\n    props.defaultSettings = defaultSettings;\n    super(props);\n  }\n  prepareData(data) {\n    let maxLength = Math.max(\n      ...data.datasets.map((datasets) => (datasets.values || []).length)\n    );\n    [...data.datasets.map((dataset) => dataset.values)].map(\n      (current, index) => {\n        if (current.length < maxLength) {\n          let countDiff = maxLength - current.length - 1;\n          for (let i = 0; i <= countDiff; i++) {\n            current.push(index ? 0 : '');\n          }\n        }\n      }\n    );\n    data.datasets.forEach((dataset) => {\n      if (!dataset.color) dataset.color = generateRandomColor();\n      dataset.color = prepareColor(dataset.color);\n      dataset.values.forEach((value, index) => {\n        dataset.values[index] = {\n          name: dataset.name,\n          color: prepareColor(dataset.color),\n          index,\n          value,\n          state: 0,\n        };\n      });\n    });\n    data.labels.forEach((label, index) => {\n      data.labels[index] = {\n        text: label,\n      };\n    });\n    let bars = data.datasets.filter((dataset) => {\n      return dataset.type === 'bar';\n    });\n    bars.forEach((bar, index) => {\n      bar.count = bars.length;\n      bar.index = index + 1;\n    });\n    if (bars.length) {\n      this.settings.data.initialValue = 0;\n      let drawRect = this.getDrawRect('bar'),\n        drawStart = drawRect.left,\n        partWidth = drawRect.width / maxLength;\n      this.settings.data.line.offset.left = partWidth / 2;\n      this.settings.data.line.offset.right = partWidth / 2;\n    }\n    return data;\n  }\n  getInterpolation(value, values) {\n    let { canvas, settings } = this,\n      { data, offset, grid } = settings,\n      { element, context } = canvas,\n      { line } = data,\n      { lineWidth } = line.styles,\n      max = Math.max(...values),\n      min = Math.min(...values),\n      top = offset.top + grid.offset.top + grid.styles.borderWidth,\n      percent =\n        ((value * this.state.loading -\n          min * (min > 0 ? this.state.loading : 1)) *\n          100) /\n        (max - min) /\n        100,\n      height =\n        element.clientHeight -\n        offset.top -\n        grid.offset.top -\n        offset.bottom -\n        grid.offset.bottom -\n        grid.styles.borderWidth * 2,\n      y = top + height - height * percent;\n    return y;\n  }\n  drawGrid() {\n    let { canvas, settings } = this,\n      { grid, offset } = settings,\n      { element, context } = canvas,\n      { enable, horizontal, vertical, styles } = grid;\n    if (!enable) return;\n    context.save();\n    let left = 0 + offset.left,\n      right = element.clientWidth - offset.right - offset.left,\n      top = 0 + offset.top,\n      bottom = element.clientHeight - offset.bottom - offset.top;\n    context.lineWidth = styles.borderWidth;\n    context.strokeStyle = styles.borderColor;\n    context.fillStyle = styles.background;\n    if (styles.dash) context.setLineDash(styles.dash);\n    context.beginPath();\n    context.roundRect(left, top, right, bottom, styles.borderRadius);\n    context.fill();\n    context.closePath();\n    context.stroke();\n    context.restore();\n    //horizontal lines\n    if (horizontal && horizontal.enable) {\n      context.save();\n      let horizonalArray = [],\n        horizontalStep =\n          (element.clientHeight - offset.top - offset.bottom) /\n          (horizontal.step + 1),\n        horizontalStepPx =\n          (element.clientHeight - offset.top - offset.bottom) / horizontal.step,\n        yStart = offset.top,\n        horizontalStyles = {\n          ...styles,\n          ...(horizontal.styles || {}),\n        },\n        horizontalType = horizontal.type || grid.type;\n      if (horizontalType === 'px') {\n        for (let i = 1; i < horizontalStepPx; i++) {\n          let y = yStart + i * horizontal.step;\n          horizonalArray.push(y);\n        }\n      } else {\n        for (let i = 1; i < horizontal.step + 1; i++) {\n          let y = yStart + i * horizontalStep;\n          horizonalArray.push(y);\n        }\n      }\n      context.lineWidth = horizontalStyles.borderWidth;\n      context.strokeStyle = horizontalStyles.borderColor;\n      if (horizontalStyles.dash) {\n        context.setLineDash(horizontalStyles.dash);\n      }\n      for (let i = 0; i <= horizonalArray.length - 1; i++) {\n        context.beginPath();\n        context.lineTo(0 + offset.left, horizonalArray[i]);\n        context.lineTo(element.clientWidth - offset.right, horizonalArray[i]);\n        context.stroke();\n      }\n      context.restore();\n    }\n\n    //verical lines\n    if (vertical && vertical.enable) {\n      context.save();\n      let verticalArray = [],\n        verticalStep =\n          (element.clientWidth - offset.right - offset.left) /\n          (vertical.step + 1),\n        verticalStepPx =\n          (element.clientWidth - offset.right - offset.left) / vertical.step,\n        xStart = offset.left,\n        verticalStyles = {\n          ...styles,\n          ...(vertical.styles || {}),\n        },\n        verticalType = vertical.type || grid.type;\n\n      if (verticalType === 'px') {\n        for (let i = 1; i < verticalStepPx; i++) {\n          let x = xStart + i * vertical.step;\n          verticalArray.push(x);\n        }\n      } else {\n        for (let i = 1; i < vertical.step + 1; i++) {\n          let x = xStart + i * verticalStep;\n          verticalArray.push(x);\n        }\n      }\n      context.lineWidth = verticalStyles.borderWidth;\n      context.strokeStyle = verticalStyles.borderColor;\n      if (verticalStyles.dash) {\n        context.setLineDash(verticalStyles.dash);\n      }\n      for (let i = 0; i <= verticalArray.length - 1; i++) {\n        context.beginPath();\n        context.lineTo(verticalArray[i], 0 + offset.top);\n        context.lineTo(verticalArray[i], element.clientHeight - offset.bottom);\n        context.stroke();\n      }\n      context.restore();\n    }\n    context.restore();\n  }\n  drawLabels() {\n    let { canvas, settings, data } = this,\n      { labels, offset, grid } = settings,\n      { element, context } = canvas,\n      { enable, styles } = labels;\n    if (!enable) return;\n    let drawRect = this.getDrawRect('line'),\n      start = drawRect.left,\n      width = drawRect.width / (data.labels.length - 1),\n      y = element.clientHeight - offset.bottom / 2;\n    data.labels.forEach((label, index) => {\n      let x = start + (width ? width * index : 0);\n      context.font = '100 ' + styles.fontSize + 'px arial';\n      context.fillStyle = styles.color;\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      label.xStart = x - width / 2;\n      label.xEnd = x + width / 2;\n      context.fillText(label.text, x, y);\n    });\n  }\n  getDatasets() {\n    let { data } = this;\n    return data.datasets;\n  }\n  getAllValues() {\n    let { data } = this.settings,\n      acc = [];\n    if (data.initialValue || data.initialValue === 0)\n      acc.push(data.initialValue);\n    let datasets = this.getDatasets(),\n      result = datasets.reduce((acc, dataset) => {\n        return [...acc, ...dataset.values.map((value) => value.value)];\n      }, acc);\n    return result;\n  }\n  drawValues() {\n    let { canvas, settings } = this,\n      { values, offset, grid } = settings,\n      { element, context } = canvas,\n      { enable, styles, digits } = values;\n    if (!enable) return;\n    let x = offset.left / 2,\n      allValues = this.getAllValues(),\n      max = Math.max(...allValues),\n      min = Math.min(...allValues);\n    context.font = '100 ' + styles.fontSize + 'px arial';\n    context.fillStyle = styles.color;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    let { count } = values,\n      texts = [],\n      stepDiff = (max - min) / (count - 1);\n    for (let i = 0; i <= count - 1; i++) {\n      let value = max - stepDiff * i;\n      texts.push({\n        value: i === 0 ? max : i === count - 1 ? min : value,\n        x,\n        y: this.getInterpolation(value, allValues),\n      });\n    }\n    texts.forEach((text) => {\n      context.fillText(text.value.toFixed(digits), text.x, text.y);\n    });\n  }\n  drawData() {\n    let { settings } = this,\n      { data } = settings,\n      { enable } = data,\n      datasets = this.getDatasets();\n    if (!enable) return;\n    let bars = datasets.filter((dataset) => {\n      return dataset.type === 'bar';\n    });\n    bars.forEach((dataset) => {\n      let { type } = dataset;\n      type = type.toUpperCase();\n      this['draw' + type] && this['draw' + type](dataset);\n    });\n    let lines = datasets.filter((dataset) => {\n      return dataset.type === 'line' || dataset.type === 'dot';\n    });\n    lines.forEach((dataset) => {\n      let { type } = dataset;\n      type = type.toUpperCase();\n      this['drawLINE'] && this['drawLINE'](dataset);\n    });\n  }\n  getDrawRect(type) {\n    let { canvas, settings } = this,\n      { offset, grid, data } = settings,\n      { element, context } = canvas,\n      viewRect = {\n        top: offset.top + grid.styles.borderWidth,\n        left: offset.left + grid.styles.borderWidth,\n        right: offset.right + grid.styles.borderWidth,\n        bottom: offset.bottom - grid.styles.borderWidth,\n        width:\n          element.clientWidth -\n          offset.left -\n          offset.right -\n          grid.styles.borderWidth * 2,\n        height:\n          element.clientHeight -\n          offset.top -\n          offset.bottom -\n          grid.styles.borderWidth * 2,\n      },\n      gridRect = {\n        top: viewRect.top + grid.offset.top,\n        left: viewRect.left + grid.offset.left,\n        right: viewRect.right + grid.offset.right,\n        bottom: viewRect.bottom - grid.offset.bottom,\n        width: viewRect.width - grid.offset.left - grid.offset.right,\n        height: viewRect.height - grid.offset.top - grid.offset.bottom,\n      },\n      barRect = gridRect,\n      lineRect = {\n        ...gridRect,\n        left: gridRect.left + data.line.offset.left,\n        right: gridRect.right + data.line.offset.right,\n        width: gridRect.width - data.line.offset.left - data.line.offset.right,\n      },\n      obj = {\n        view: viewRect,\n        grid: gridRect,\n        bar: barRect,\n        line: lineRect,\n      };\n    return type && obj[type] ? obj[type] : obj;\n  }\n  drawLINE(dataset, allValues) {\n    let { canvas, settings } = this,\n      { data, offset, grid } = settings,\n      { element, context } = canvas,\n      { line } = data,\n      { lineWidth } = line.styles,\n      { values, color } = dataset,\n      drawRect = this.getDrawRect('line'),\n      viewRect = this.getDrawRect('view'),\n      drawStart = drawRect.left,\n      partWidth =\n        drawRect.width / (values.length === 1 ? 1 : values.length - 1);\n    values.forEach((value, index) => {\n      let x = drawStart + partWidth * index,\n        y = this.getInterpolation(value.value, this.getAllValues());\n      value.x = x;\n      value.y = y;\n      value.isFirst = !index;\n      value.isLast = index === values.length - 1;\n      value.area = {\n        xStart: value.isFirst ? viewRect.left : x - partWidth / 2,\n        yStart: drawRect.top,\n        xEnd: value.isLast\n          ? element.clientWidth - viewRect.right\n          : x + partWidth / 2,\n        yEnd: drawRect.top + drawRect.height,\n      };\n      this.checkIsHovered(value);\n    });\n    if (dataset.type === 'line') {\n      context.strokeStyle = dataset.color;\n      context.lineWidth = lineWidth;\n      context.lineJoin = 'round';\n      context.beginPath();\n      values.forEach((value, index) => {\n        this.checkIsHovered(value);\n        if (!index) {\n          context.moveTo(value.x, value.y);\n        } else {\n          context.lineTo(value.x, value.y);\n        }\n      });\n      context.stroke();\n    }\n    if (dataset.type === 'dot' || line?.dots?.enable) {\n      context.fillStyle = dataset.color;\n      context.strokeStyle = colorChangeTone(dataset.color, -50);\n      values.forEach((value, index) => {\n        context.beginPath();\n        context.arc(\n          value.x,\n          value.y,\n          line.dots.width +\n            (line.dots.hover.enable ? line.dots.hover.width * value.state : 0),\n          0,\n          2 * Math.PI\n        );\n        context.fill();\n        context.closePath();\n        context.stroke();\n      });\n    }\n  }\n  drawBAR(dataset, allValues) {\n    let { canvas, settings, cursor } = this,\n      { data } = settings,\n      { element, context } = canvas,\n      { bar } = data,\n      { values } = dataset,\n      drawRect = this.getDrawRect('bar'),\n      viewRect = this.getDrawRect('view'),\n      drawStart = drawRect.left,\n      partWidth = drawRect.width / values.length;\n    data.line.offset.left = partWidth / 2;\n    data.line.offset.right = partWidth / 2;\n    values.forEach((value, index) => {\n      value.isFirst = !index;\n      value.isLast = index === values.length - 1;\n      context.beginPath();\n      let color = colorChangeTone(\n        dataset.color,\n        bar?.hover?.enable ? bar.hover.value * value.state : 1\n      );\n      context.strokeStyle = color;\n      context.fillStyle = color;\n      let barWidth = partWidth / dataset.count - bar.offset / dataset.count,\n        x =\n          drawStart +\n          bar.offset / 2 +\n          partWidth * index +\n          barWidth * (dataset.index - 1),\n        xStart = x,\n        xEnd = x + barWidth,\n        y = this.getInterpolation(value.value, this.getAllValues()),\n        y0 = this.getInterpolation(0, this.getAllValues());\n      value.area = {\n        xStart: value.isFirst ? viewRect.left : drawStart + partWidth * index,\n        yStart: drawRect.top,\n        xEnd: value.isLast\n          ? element.clientWidth - viewRect.right\n          : drawStart +\n            partWidth * index +\n            barWidth * dataset.count +\n            bar.offset,\n        yEnd: drawRect.top + drawRect.height,\n      };\n      this.checkIsHovered(value);\n      context.moveTo(xStart, y0);\n      context.lineTo(xStart, y);\n      context.lineTo(xEnd, y);\n      context.lineTo(xEnd, y0);\n      context.fill();\n    });\n  }\n  checkIsHovered(item) {\n    let { cursor } = this,\n      { area } = item,\n      bool =\n        cursor.x >= area.xStart &&\n        cursor.x < area.xEnd &&\n        cursor.y >= area.yStart &&\n        cursor.y < area.yEnd;\n    item.isHovered = bool;\n    super.hover({\n      item,\n      isHovered: bool,\n    });\n    return bool;\n  }\n  drawTooltip() {\n    let { settings, data, cursor } = this,\n      hovered = data.datasets.map((dataset) => {\n        return dataset.values.filter((value) => value.isHovered);\n      });\n    hovered = hovered.reduce((acc, panel) => {\n      return [...acc, ...panel];\n    }, []);\n    if (!hovered.length) return;\n    let labels = data.labels.filter((label) => {\n        return label.xStart <= cursor.x && label.xEnd >= cursor.x;\n      }),\n      label = labels[labels.length - 1];\n    super.drawTooltip({\n      title: {\n        text: label?.text || '',\n      },\n      panels: hovered.map((panel) => ({\n        colorPanel: {\n          color: panel.color,\n        },\n        texts: [\n          {\n            text: 'Value: ' + panel.value.toFixed(settings.data.digits),\n          },\n        ],\n        footer: {\n          text: panel.name,\n        },\n      })),\n      render: (obj) => {},\n    });\n  }\n  render(info = {}) {\n    let time = 300;\n    if (this.renderTimeout) clearTimeout(this.renderTimeout);\n    this.renderTimeout = setTimeout(() => {\n      super.baseRender();\n      this.drawGrid();\n      this.drawLabels();\n      this.drawData();\n      this.drawValues();\n      this.drawTooltip();\n    }, time / 60);\n  }\n}\n","export default {\n  offset: {\n    top: 30,\n    right: 30,\n    bottom: 30,\n    left: 30,\n  },\n  data: {\n    volumed: true,\n    hover: {\n      value: 20\n    },\n    styles: {\n      width: 80,\n      color: '#fff',\n    },\n  },\n  texts: {\n    center: {\n      enable: false,\n      text: '100%',\n      styles: {\n        color: '#ffffff',\n        fontSize: 30,\n      },\n    },\n    slicePercent: {\n      enable: false,\n      styles: {\n        color: '#ffffff',\n        fontSize: 10,\n      },\n    },\n  },\n};\n","import {\n  generateRandomColor,\n  generateDate,\n  getPointOnArc,\n  colorChangeTone,\n  getContrastColor,\n  intersectionPolygon,\n} from '../../common';\nimport defaultSettings from './defaultSettings';\nimport Chart from '../chart';\n\nexport default class Slices extends Chart {\n  constructor(props) {\n    props.defaultSettings = defaultSettings;\n    super(props);\n  }\n  prepareData(data = []) {\n    data = data.filter((item) => {\n      return item.value > 0;\n    });\n    let total = data.reduce(\n      (acc, item) => acc + (parseFloat(item.value) || 0),\n      0\n    );\n    data.forEach((item) => {\n      item.percent = (100 / total) * item.value;\n      item.total = total;\n      item.color = item.color || generateRandomColor();\n      item.state = item.state || 0;\n    });\n    return data;\n  }\n  generatePolygon({ count = 20, x, y, radius, sliceWidth, startPi, endPi }) {\n    let polygon = [],\n      temp = (endPi - startPi) / count;\n    temp = isFinite(temp) ? temp : 0;\n    for (let i = 0; i <= count; i++) {\n      polygon.push(\n        getPointOnArc(x, y, radius + sliceWidth / 2, startPi + temp * i)\n      );\n    }\n    for (let i = 0; i <= count; i++) {\n      polygon.push(\n        getPointOnArc(x, y, radius - sliceWidth / 2, endPi - temp * i)\n      );\n    }\n    return polygon;\n  }\n  drawSlices() {\n    let { canvas, settings, data, cursor, type, state } = this,\n      { context, element } = canvas,\n      sideSize =\n        Math.min(\n          element.clientHeight -\n            settings.offset.top -\n            settings.offset.bottom -\n            (type === 'donut' ? settings.data.styles.width : 0),\n          element.clientWidth -\n            settings.offset.left -\n            settings.offset.right -\n            (type === 'donut' ? settings.data.styles.width : 0)\n        ) * state.loading,\n      sliceWidth,\n      radius,\n      x =\n        element.clientWidth / 2 + settings.offset.left - settings.offset.right,\n      y =\n        element.clientHeight / 2 + settings.offset.top - settings.offset.bottom,\n      { volumed } = settings.data,\n      piOffset = -(Math.PI / 2);\n    if (type === 'pie') {\n      sliceWidth = sideSize / 2;\n      radius = sideSize / 4;\n    }\n    if (type === 'donut') {\n      if (settings.data.styles.width >= sideSize) {\n        sliceWidth = sideSize;\n      } else {\n        sliceWidth = settings.data.styles.width;\n      }\n      radius = sideSize / 2;\n    }\n    for (let i = 0; i <= data.length - 1; i++) {\n      let startPi = piOffset,\n        endPi =\n          (2 * Math.PI * state.loading * data[i].percent) / 100 + piOffset,\n        hoveredValue = settings.data.hover.value * data[i].state;\n      data[i].startPi = startPi;\n      data[i].endPi = endPi;\n      piOffset = endPi;\n      let polygon = this.generatePolygon({\n          x,\n          y,\n          radius: radius + hoveredValue / 2,\n          sliceWidth: sliceWidth + hoveredValue,\n          startPi,\n          endPi,\n        }),\n        mouseInPath = intersectionPolygon({\n          x: cursor.x,\n          y: cursor.y,\n          polygon,\n        });\n      data[i].polygon = polygon;\n      data[i].hovered = mouseInPath;\n\n      super.hover({\n        item: data[i],\n        isHovered: data[i].hovered,\n      });\n\n      let ring = [];\n      ring.push({\n        radius: radius + hoveredValue / 2,\n        width: sliceWidth + hoveredValue,\n        color: colorChangeTone(data[i].color, hoveredValue),\n        x,\n        y,\n        startPi,\n        endPi,\n      });\n      if (volumed) {\n        let volumeRadius, volumeWidth;\n        if (type === 'donut') {\n          volumeRadius = radius - sliceWidth / 4 + hoveredValue / 2;\n          volumeWidth = sliceWidth / 2 + hoveredValue;\n        }\n        if (type === 'pie') {\n          volumeRadius = radius - sliceWidth / 6 + hoveredValue / 2;\n          volumeWidth = volumeRadius * 2;\n        }\n        ring.push({\n          radius: volumeRadius,\n          width: volumeWidth,\n          color: colorChangeTone(data[i].color, -50 + hoveredValue),\n          x,\n          y,\n          startPi,\n          endPi,\n        });\n      }\n\n      for (let r = 0; r <= ring.length - 1; r++) {\n        context.save();\n        context.beginPath();\n        context.strokeStyle = ring[r].color;\n        context.lineWidth = ring[r].width;\n        context.fillStyle = 'transparent';\n        context.arc(\n          ring[r].x,\n          ring[r].y,\n          ring[r].radius > 0 ? ring[r].radius : 0,\n          ring[r].startPi,\n          ring[r].endPi\n        );\n        context.fill();\n        context.stroke();\n        context.restore();\n      }\n    }\n    if (settings.texts.slicePercent.enable) {\n      for (let i = 0; i <= data.length - 1; i++) {\n        context.font =\n          '100 ' + settings.texts.slicePercent.styles.fontSize + 'px arial';\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.fillStyle = settings.texts.slicePercent.styles.color;\n        let percentRadius = radius,\n          hoveredValue = settings.data.hover.value * data[i].state;\n        if (type === 'donut' && volumed) {\n          percentRadius += sliceWidth / 4 + hoveredValue;\n        }\n        if (type === 'donut' && !volumed) {\n          percentRadius += hoveredValue / 2;\n        }\n        if (type === 'pie' && volumed) {\n          percentRadius += sliceWidth / 3 + hoveredValue;\n        }\n        if (type === 'pie' && !volumed) {\n          percentRadius += hoveredValue / 2;\n        }\n        let pointText = parseFloat(data[i].percent.toFixed(2)) + '%',\n          point = getPointOnArc(\n            x,\n            y,\n            percentRadius,\n            (data[i].startPi + data[i].endPi) / 2\n          );\n        context.fillText(pointText, point.x, point.y);\n      }\n    }\n    //draw center\n    if (settings.texts.center.enable) {\n      context.font =\n        '800 ' +\n        settings.texts.center.styles.fontSize * state.loading +\n        'px arial';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.fillStyle = settings.texts.center.styles.color;\n      context.fillText(settings.texts.center.text, x, y);\n    }\n  }\n  drawTooltip() {\n    let hovered = this.data.find((item) => {\n      return item.hovered;\n    });\n    if (hovered) {\n      super.drawTooltip({\n        title: {\n          text: hovered.label,\n        },\n        panels: [\n          {\n            colorPanel: {\n              color: hovered.color,\n            },\n            texts: [\n              {\n                text: 'Value: ' + hovered.value,\n              },\n              {\n                text: 'Percent: ' + hovered.percent.toFixed(2) + '%',\n              },\n            ],\n            footer: {\n              text: 'Total: ' + hovered.total,\n            },\n          },\n        ],\n        render: (obj) => {},\n      });\n    }\n  }\n  render(info = {}) {\n    let time = 300;\n    if (this.renderTimeout) clearTimeout(this.renderTimeout);\n    this.renderTimeout = setTimeout(() => {\n      super.baseRender();\n      this.drawSlices();\n      this.drawTooltip();\n    }, time / 60);\n  }\n}\n","import Slice from '../Slice';\n\nexport default class Donut extends Slice {\n  constructor(props) {\n    props.type = 'donut';\n    super(props);\n  }\n}\n","import Slice from '../Slice';\n\nexport default class Pie extends Slice {\n  constructor(props) {\n    props.type = 'pie';\n    super(props);\n  }\n}\n","export default {\n  offset: {\n    top: 40,\n    right: 40,\n    bottom: 40,\n    left: 40,\n  },\n  scheme: {\n    count: 4,\n    styles: {\n      width: 2,\n      color: '#2b2a49'\n    }\n  },\n  labels: {\n    enable: true,\n    offset: 15,\n    styles: {\n      fontSize: 14,\n      color: '#ffffff'\n    }\n  },\n  data: {\n    line: {\n      styles: {\n        width: 2\n      }\n    },\n    dots: {\n      enable: true,\n      styles: {\n        width: 3,\n        hover: {\n          width: 5\n        }\n      },\n    }\n  }\n};\n","import {\n  generateRandomColor,\n  getPointOnArc,\n  intersectionPolygon,\n  colorChangeTone,\n} from '../../common';\nimport defaultSettings from './defaultSettings';\nimport Chart from '../chart';\n\nexport default class Example extends Chart {\n  constructor(props) {\n    props.defaultSettings = defaultSettings;\n    super(props);\n  }\n  prepareData(data = {}) {\n    let labels = data.labels;\n    data.datasets.forEach((item, parentIndex) => {\n      item.color = item.color || generateRandomColor();\n      item.state = item.state || 0;\n      if (item.values.length > labels.length)\n        item.values.length = labels.length;\n      if (item.values.length < labels.length) {\n        for (let i = item.values.length; i < labels.length; i++) {\n          item.values.push(0);\n        }\n      }\n      item.values = item.values.map((value, index) => {\n        return {\n          value,\n          parentIndex,\n          index,\n        };\n      });\n    });\n    return data;\n  }\n  getCoords() {\n    let { canvas, settings, data } = this,\n      { context, element } = canvas,\n      width = Math.min(\n        element.clientHeight - settings.offset.top - settings.offset.bottom,\n        element.clientWidth - settings.offset.left - settings.offset.right\n      ),\n      x =\n        element.clientWidth / 2 + settings.offset.left - settings.offset.right,\n      y =\n        element.clientHeight / 2 + settings.offset.top - settings.offset.bottom,\n      piStart = -(Math.PI / 2),\n      piPart = (Math.PI * 2) / data.labels.length;\n    return {\n      width,\n      widthHalf: width / 2,\n      x,\n      y,\n      piStart,\n      piPart,\n    };\n  }\n  drawTooltip() {\n    let data = this.data.datasets\n        .map((dataset) => {\n          return dataset.values;\n        })\n        .flat(),\n      { labels } = this.data,\n      hovered = data.filter((item) => {\n        return item.hovered;\n      });\n    if (hovered.length) {\n      super.drawTooltip({\n        title: {\n          text: labels[hovered[0]['index']],\n        },\n        panels: hovered.map((item) => {\n          return {\n            colorPanel: {\n              color: this.data.datasets[item['parentIndex']].color,\n            },\n            texts: [\n              {\n                text: 'Value: ' + item.value,\n              },\n            ],\n            footer: {\n              text: this.data.datasets[item['parentIndex']].name,\n            },\n          };\n        }),\n        render: (obj) => {},\n      });\n    }\n  }\n  drawScheme() {\n    let { canvas, settings, data, cursor, type, state } = this,\n      { context, element } = canvas,\n      { scheme } = settings,\n      coords = this.getCoords();\n    for (let i = 0; i <= data.labels.length - 1; i++) {\n      let point = getPointOnArc(\n        coords.x,\n        coords.y,\n        coords.widthHalf,\n        coords.piStart + coords.piPart * i\n      );\n      context.strokeStyle = scheme.styles.color;\n      context.lineWidth = scheme.styles.width;\n      context.beginPath();\n      context.moveTo(coords.x, coords.y);\n      context.lineTo(point.x, point.y);\n      context.fill();\n      context.stroke();\n      for (let l = 0; l <= scheme.count; l++) {\n        let partSliceWidth = coords.widthHalf / scheme.count;\n        let currentPoint = getPointOnArc(\n            coords.x,\n            coords.y,\n            coords.widthHalf - partSliceWidth * l,\n            coords.piStart + coords.piPart * i\n          ),\n          prevPoint = getPointOnArc(\n            coords.x,\n            coords.y,\n            coords.widthHalf - partSliceWidth * l,\n            coords.piStart + coords.piPart * (i - 1)\n          );\n        context.beginPath();\n        context.moveTo(currentPoint.x, currentPoint.y);\n        context.lineTo(prevPoint.x, prevPoint.y);\n        context.fill();\n        context.stroke();\n      }\n    }\n  }\n  drawLabels() {\n    let { canvas, settings, data, cursor, type, state } = this,\n      { context, element } = canvas,\n      { labels } = settings,\n      coords = this.getCoords();\n    for (let i = 0; i <= data.labels.length - 1; i++) {\n      if (labels.enable) {\n        context.save();\n        let point = getPointOnArc(\n          coords.x,\n          coords.y,\n          coords.widthHalf + labels.offset,\n          coords.piStart + coords.piPart * i\n        );\n        let label = data.labels[i] || '';\n        context.globalAlpha = 1 * state.loading;\n        context.font =\n          '100 ' + labels.styles.fontSize * state.loading + 'px arial';\n        context.textAlign = (() => {\n          if (point.x > coords.x) return 'left';\n          if (point.x < coords.x) return 'right';\n          return 'center';\n        })();\n        context.textBaseline = 'middle';\n        context.fillStyle = labels.styles.color;\n        context.fillText(label, point.x, point.y);\n        context.restore();\n      }\n    }\n  }\n  drawData() {\n    let { canvas, settings, data, cursor, type, state } = this,\n      { context, element } = canvas,\n      coords = this.getCoords(),\n      flatList = data.datasets\n        .map((data) => {\n          return data.values;\n        })\n        .flat()\n        .map((value) => {\n          return value.value;\n        }),\n      max = Math.max(...flatList);\n\n    for (let i = 0; i <= data.datasets.length - 1; i++) {\n      let dataset = data.datasets[i];\n      context.strokeStyle = dataset.color;\n      context.fillStyle = dataset.color;\n      context.lineWidth = settings.data.line.styles.width;\n      context.beginPath();\n      for (let d = 0; d <= dataset.values.length - 1; d++) {\n        let value = dataset.values[d],\n          percent = value.value / max,\n          point = getPointOnArc(\n            coords.x,\n            coords.y,\n            coords.widthHalf * percent * state.loading,\n            coords.piStart + coords.piPart * d\n          );\n        value.coords = point;\n        d === 0\n          ? context.moveTo(point.x, point.y)\n          : context.lineTo(point.x, point.y);\n      }\n      context.globalAlpha = 0.5;\n      context.fill();\n      context.globalAlpha = 1;\n      context.closePath();\n      context.stroke();\n      for (let d = 0; d <= dataset.values.length - 1; d++) {\n        let value = dataset.values[d],\n          percent = value.value / max,\n          point = getPointOnArc(\n            coords.x,\n            coords.y,\n            coords.widthHalf * percent * state.loading,\n            coords.piStart + coords.piPart * d\n          ),\n          polygon = [\n            {\n              x: coords.x,\n              y: coords.y,\n            },\n            getPointOnArc(\n              coords.x,\n              coords.y,\n              coords.widthHalf,\n              coords.piStart + coords.piPart * d - coords.piPart / 2\n            ),\n            getPointOnArc(\n              coords.x,\n              coords.y,\n              coords.widthHalf,\n              coords.piStart + coords.piPart * d\n            ),\n            getPointOnArc(\n              coords.x,\n              coords.y,\n              coords.widthHalf,\n              coords.piStart + coords.piPart * d + coords.piPart / 2\n            ),\n          ];\n        value.hovered = intersectionPolygon({\n          polygon,\n          x: cursor.x,\n          y: cursor.y,\n        });\n        super.hover({\n          item: value,\n          isHovered: value.hovered,\n        });\n\n        if (settings.data.dots.enable) {\n          let dotSize = settings.data.dots.styles.width * state.loading;\n          if(value.hasOwnProperty('state')) dotSize += (settings.data.dots.styles.hover.width - settings.data.dots.styles.width) * value.state;\n          context.beginPath();\n          context.arc(\n            point.x,\n            point.y,\n            dotSize,\n            0,\n            2 * Math.PI\n          );\n          context.fill();\n          context.closePath();\n          context.stroke();\n        }\n      }\n    }\n  }\n  render(info = {}) {\n    let time = 300;\n    if (this.renderTimeout) clearTimeout(this.renderTimeout);\n    this.renderTimeout = setTimeout(() => {\n      super.baseRender();\n      this.drawScheme();\n      this.drawLabels();\n      this.drawData();\n      this.drawTooltip();\n    }, time / 60);\n  }\n}\n","export default {\n  offset: {\n    top: 30,\n    right: 30,\n    bottom: 30,\n    left: 30,\n  },\n  label: {\n    enable: true,\n    styles: {\n      fontSize: 14,\n      color: '#fff',\n    },\n  },\n  value: {\n    enable: true,\n    styles: {\n      fontSize: 14,\n      color: '#fff',\n    },\n  },\n  area: {\n    gradient: false,\n    smooth: true\n  },\n  hover: {\n    enable: true,\n    value: 15\n  }\n};\n","import {\n  generateRandomColor,\n  intersectionPolygon,\n  colorChangeTone,\n  hexAverage,\n} from '../../common';\nimport defaultSettings from './defaultSettings';\nimport Chart from '../chart';\n\nexport default class Example extends Chart {\n  constructor(props) {\n    props.defaultSettings = defaultSettings;\n    super(props);\n  }\n  prepareData(data = []) {\n    data.forEach((item) => {\n      item.color = item.color || generateRandomColor();\n      item.state = item.state || 0;\n    });\n    return data;\n  }\n  drawTooltip() {\n    let { data } = this,\n      hovered = data.find((item) => {\n        return item.hovered;\n      });\n    if (hovered) {\n      super.drawTooltip({\n        title: {\n          text: hovered.label,\n        },\n        panels: [\n          {\n            colorPanel: {\n              color: hovered.color,\n            },\n            texts: [\n              {\n                text: 'Value: ' + hovered.value,\n              },\n            ],\n          },\n        ],\n        render: (obj) => {},\n      });\n    }\n  }\n  getDrawRect() {\n    let { canvas, settings, data } = this,\n      { element } = canvas,\n      result = {\n        xStart: settings.offset.left,\n        xEnd: element.clientWidth - settings.offset.right,\n        yStart: settings.offset.top,\n        yEnd: element.clientHeight - settings.offset.bottom,\n      };\n    result.width = result.xEnd - result.xStart;\n    result.height = result.yEnd - result.yStart;\n    result.center = result.xStart + result.width / 2;\n    result.partHeight = result.height / data.length;\n    return result;\n  }\n  drawFunnel() {\n    let { canvas, settings, data, cursor, type, state } = this,\n      { context, element } = canvas,\n      max = Math.max(...data.map((item) => item.value)),\n      rect = this.getDrawRect();\n    data = this.prepareData(data);\n    let bezierLeft = [],\n      bezierRight = [];\n    for (let i = 0; i <= data.length - 1; i++) {\n      let item = data[i],\n        nextItem = data[i + 1],\n        prevItem = data[i - 1],\n        yStart = rect.yStart + rect.partHeight * i,\n        yEnd = yStart + rect.partHeight,\n        width = (item.value / max) * rect.width,\n        nextWidth = nextItem ? (nextItem.value / max) * rect.width : width;\n      width *= state.loading;\n      nextWidth *= state.loading;\n      context.beginPath();\n      context.strokeStyle = 'transparent';\n      let color = colorChangeTone(\n        item.color,\n        settings.hover.enable && item.state\n          ? settings.hover.value * item.state\n          : 1\n      );\n      if (settings.area?.gradient) {\n        let nextColor = nextItem\n            ? colorChangeTone(\n                nextItem.color,\n                settings.hover.enable && nextItem.state\n                  ? settings.hover.value * nextItem.state\n                  : 1\n              )\n            : color,\n          prevColor = prevItem\n            ? colorChangeTone(\n                prevItem.color,\n                settings.hover.enable && prevItem.state\n                  ? settings.hover.value * prevItem.state\n                  : 1\n              )\n            : color,\n          gradient = context.createLinearGradient(0, yStart, 0, yEnd);\n        gradient.addColorStop(0, hexAverage([prevColor, color]));\n        gradient.addColorStop(0.3, color);\n        gradient.addColorStop(0.7, color);\n        gradient.addColorStop(1, hexAverage([color, nextColor]));\n        color = gradient;\n      }\n      context.fillStyle = context.strokeStyle = color;\n      let polygon = [\n        {\n          x: rect.center - width / 2,\n          y: yStart,\n        },\n        {\n          x: rect.center - nextWidth / 2,\n          y: yEnd,\n        },\n        {\n          x: rect.center + nextWidth / 2,\n          y: yEnd,\n        },\n        {\n          x: rect.center + width / 2,\n          y: yStart,\n        },\n      ];\n      if (!i) {\n        bezierLeft.push([polygon[0].x, polygon[0].y]);\n        bezierRight.push([polygon[3].x, polygon[3].y]);\n      }\n      bezierLeft.push([polygon[1].x, polygon[1].y]);\n      bezierRight.push([polygon[2].x, polygon[2].y]);\n      for (let p = 0; p <= polygon.length - 1; p++) {\n        if (p === 0) context.moveTo(polygon[p].x, polygon[p].y);\n        else context.lineTo(polygon[p].x, polygon[p].y);\n      }\n      context.fill();\n      context.closePath();\n      context.stroke();\n\n      item.hovered = intersectionPolygon({\n        polygon,\n        x: cursor.x,\n        y: cursor.y,\n      });\n      super.hover({\n        item: item,\n        isHovered: item.hovered,\n      });\n\n      context.save();\n\n      let x = rect.center,\n        y = yEnd - (yEnd - yStart) / 2;\n      context.globalAlpha = 1 * state.loading;\n      if (settings.label?.enable) {\n        context.font =\n          '100 ' + settings.label.styles.fontSize * state.loading + 'px arial';\n        context.fillStyle = settings.label.styles.color;\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.fillText(\n          item.label,\n          x,\n          yStart + settings.label.styles.fontSize + 5\n        );\n      }\n      if (settings.value?.enable) {\n        context.font =\n          '100 ' + settings.value.styles.fontSize * state.loading + 'px arial';\n        context.fillStyle = settings.value.styles.color;\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.fillText(item.value, x, y);\n      }\n      context.restore();\n    }\n    bezierRight.reverse();\n    // context.fillStyle = context.strokeStyle = 'red';\n    // context.beginPath();\n    // context.moveTo(bezierLeft[0][0], bezierLeft[0][1]);\n    // context.bezierCurveMulti(bezierLeft);\n    // context.moveTo(bezierRight[0][0], bezierRight[0][1]);\n    // context.bezierCurveMulti(bezierRight);\n    // context.stroke();\n    // context.fill();\n    // console.log(bezierLeft, bezierRight);\n  }\n  render(info = {}) {\n    let time = 300;\n    if (this.renderTimeout) clearTimeout(this.renderTimeout);\n    this.renderTimeout = setTimeout(() => {\n      super.baseRender();\n      this.drawFunnel();\n      this.drawTooltip();\n    }, time / 60);\n  }\n}\n","export default {\n  count: 2,\n  top: {\n    count: 6,\n  },\n  styles: {\n    width: 2,\n    color: '#2b2a49',\n  },\n  offset: {\n    top: 30,\n    right: 30,\n    bottom: 30,\n    left: 30,\n  },\n};\n","import defaultSettings from './defaultSettings';\nimport Chart from '../chart';\n\nimport {\n  generateRandomColor,\n  getPointOnArc,\n  intersectionPolygon,\n  colorChangeTone,\n} from '../../common';\n\nexport default class Example extends Chart {\n  constructor(props) {\n    props.defaultSettings = defaultSettings;\n    super(props);\n  }\n  getCoords() {\n    let { canvas, settings } = this,\n      { context, element } = canvas,\n      width = Math.min(\n        element.clientHeight - settings.offset.top - settings.offset.bottom,\n        element.clientWidth - settings.offset.left - settings.offset.right\n      ),\n      x =\n        element.clientWidth / 2 + settings.offset.left - settings.offset.right,\n      y =\n        element.clientHeight / 2 + settings.offset.top - settings.offset.bottom,\n      piStart = -(Math.PI / 2),\n      piPart = (Math.PI * 2) / settings.top.count;\n    return {\n      width,\n      widthHalf: width / 2,\n      x,\n      y,\n      piStart,\n      piPart,\n    };\n  }\n  drawTooltip() {}\n  draw() {\n    const { canvas, settings } = this;\n    const { styles, count, top } = settings;\n    const { context } = canvas;\n    const coords = this.getCoords();\n\n    for (let i = 0; i <= count - 1; i++) {\n      context.strokeStyle = styles.color;\n      context.lineWidth = styles.width;\n      context.beginPath();\n\n      for (let i = 0; i <= top.count - 1; i++) {\n        let point = getPointOnArc(\n          coords.x,\n          coords.y,\n          coords.widthHalf * Math.min(1, Math.random() + 0.3),\n          coords.piStart + coords.piPart * i\n        );\n\n        if (!i) {\n          context.moveTo(point.x, point.y);\n        } else {\n          context.lineTo(point.x, point.y);\n        }\n      }\n\n      context.closePath();\n      context.stroke();\n    }\n  }\n  render(info = {}) {\n    let time = 300;\n    if (this.renderTimeout) clearTimeout(this.renderTimeout);\n    this.renderTimeout = setTimeout(() => {\n      super.baseRender();\n      this.draw();\n      this.drawTooltip();\n    }, time / 60);\n  }\n}\n","import { Plot, Donut, Pie, Radar, Funnel, Spectr } from '../Chart';\nexport { Plot, Donut, Pie, Radar, Funnel, Spectr };\nexport default { Plot, Donut, Pie, Radar, Funnel, Spectr };\nwindow.bChart = {\n  Plot,\n  Donut,\n  Pie,\n  Radar,\n  Funnel,\n  Spectr,\n};\n"],"names":["root","factory","exports","module","define","amd","a","i","self","Date","prototype","formatting","format","yyyy","this","getFullYear","toString","replace","mm","getMonth","dd","getDate","hh","getHours","ii","getMinutes","ss","getSeconds","CanvasRenderingContext2D","roundRect","x","y","w","h","r","beginPath","moveTo","arcTo","closePath","bezierCurveMulti","points","tension","l","length","lineTo","cpoints","forEach","push","pi","pp","pn","rdx","rdy","rd","dx","dy","dp","dn","cpx","cpy","cnx","cny","cp","cn","p","cpp","bezierCurveTo","Math","sqrt","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call","Symbol","toStringTag","value","hexAverage","colors","reduce","previousValue","currentValue","match","map","index","parseInt","numberString","floor","deepMerge","obj1","obj2","constructor","e","deepClone","Array","generateRandomColor","color","random","getPointOnArc","radius","angle","cos","sin","colorChangeTone","amount","min","max","substr","prepareColor","nextColor","intersectionPolygon","polygon","inside","j","xi","yi","xj","yj","offset","top","right","bottom","left","grid","enable","styles","background","borderColor","borderRadius","borderWidth","horizontal","step","vertical","labels","fontSize","values","digits","count","data","line","dots","width","hover","lineWidth","bar","animated","view","tooltip","padding","Chart","props","canvas","defaultSettings","settings","actions","type","element","context","getContext","isCanvas","Element","HTMLDocument","tagName","toLowerCase","cursor","commonDefaultSettings","timeStamp","setSettings","state","loading","prepareData","commonInit","newSettings","render","from","getSettings","setData","getData","setRatio","ratio","window","devicePixelRatio","clientWidth","height","clientHeight","scale","clearCanvas","clearRect","setTimeout","commonListeners","addEventListener","elementOffset","getBoundingClientRect","clientX","clientY","drawTooltip","title","panels","font","textAlign","textBaseline","text","measureText","panel","prevWidth","colorPanel","texts","currentWidth","footer","panelsWidth","acc","panelWidth","minCount","oversizeWidth","center","topOffset","invert","fillStyle","strokeStyle","fill","stroke","fillText","save","rect","restore","func","box","drawBackground","fillRect","item","isHovered","baseRender","Plot","super","maxLength","datasets","dataset","current","countDiff","name","label","bars","filter","initialValue","drawRect","getDrawRect","partWidth","getInterpolation","percent","drawGrid","dash","setLineDash","horizonalArray","horizontalStep","horizontalStepPx","yStart","horizontalStyles","verticalArray","verticalStep","verticalStepPx","xStart","verticalStyles","drawLabels","start","xEnd","getDatasets","getAllValues","drawValues","allValues","stepDiff","toFixed","drawData","toUpperCase","viewRect","gridRect","drawLINE","drawStart","isFirst","isLast","area","yEnd","checkIsHovered","lineJoin","arc","PI","drawBAR","barWidth","y0","bool","hovered","info","renderTimeout","clearTimeout","time","volumed","slicePercent","Slices","total","parseFloat","generatePolygon","sliceWidth","startPi","endPi","temp","isFinite","drawSlices","sideSize","piOffset","hoveredValue","mouseInPath","ring","volumeRadius","volumeWidth","percentRadius","pointText","point","find","Donut","Slice","Pie","scheme","Example","parentIndex","getCoords","widthHalf","piStart","piPart","flat","drawScheme","coords","partSliceWidth","currentPoint","prevPoint","globalAlpha","flatList","dotSize","gradient","smooth","result","partHeight","drawFunnel","bezierLeft","bezierRight","nextItem","prevItem","nextWidth","prevColor","createLinearGradient","addColorStop","reverse","draw","Radar","Funnel","Spectr","bChart"],"sourceRoot":""}