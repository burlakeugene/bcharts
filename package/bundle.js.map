{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://bcharts/webpack/bootstrap","webpack://bcharts/webpack/runtime/define property getters","webpack://bcharts/webpack/runtime/hasOwnProperty shorthand","webpack://bcharts/webpack/runtime/make namespace object","webpack://bcharts/./src/Chart/common.js","webpack://bcharts/./src/Chart/extensions.js","webpack://bcharts/./src/Chart/modules/Plot/defaultSettings.js","webpack://bcharts/./src/Chart/modules/commonDefaultSettings.js","webpack://bcharts/./src/Chart/modules/chart.js","webpack://bcharts/./src/Chart/modules/Plot/index.js","webpack://bcharts/./src/Chart/modules/Slice/defaultSettings.js","webpack://bcharts/./src/Chart/modules/Slice/index.js","webpack://bcharts/./src/Chart/modules/Donut/index.js","webpack://bcharts/./src/Chart/modules/Pie/index.js","webpack://bcharts/./src/Chart/modules/Radar/defaultSettings.js","webpack://bcharts/./src/Chart/modules/Radar/index.js","webpack://bcharts/./src/Chart/modules/Funnel/defaultSettings.js","webpack://bcharts/./src/Chart/modules/Funnel/index.js","webpack://bcharts/./src/Chart/modules/Spectr/defaultSettings.js","webpack://bcharts/./src/Chart/modules/Spectr/index.js","webpack://bcharts/./src/package/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","function padZero(str, len) {\n  len = len || 2;\n  var zeros = new Array(len).join('0');\n  return (zeros + str).slice(-len);\n}\n\nfunction padToTwo(numberString) {\n  if (numberString.length < 2) {\n    numberString = '0' + numberString;\n  }\n  return numberString;\n}\n\nexport const hexAverage = (colors) => {\n  return colors\n    .reduce(\n      function (previousValue, currentValue) {\n        return currentValue\n          .replace(/^#/, '')\n          .match(/.{2}/g)\n          .map(function (value, index) {\n            return previousValue[index] + parseInt(value, 16);\n          });\n      },\n      [0, 0, 0]\n    )\n    .reduce(function (previousValue, currentValue) {\n      return (\n        previousValue +\n        padToTwo(Math.floor(currentValue / colors.length).toString(16))\n      );\n    }, '#');\n};\n\nexport const generateDate = (time, format = 'hh:ii:ss') => {\n  let result = '';\n  time = new Date(time);\n  result = time.formatting(format);\n  return result;\n};\n\nexport const deepMerge = (obj1, obj2) => {\n  for (var p in obj2) {\n    try {\n      if (obj2[p].constructor == Object) {\n        obj1[p] = deepMerge(obj1[p], obj2[p]);\n      } else {\n        obj1[p] = obj2[p];\n      }\n    } catch (e) {\n      obj1[p] = obj2[p];\n    }\n  }\n  return obj1;\n};\n\nexport const deepClone = (o) => {\n  if (typeof o != 'object') {\n    return o;\n  }\n  if (!o) {\n    return o;\n  }\n  var r = o instanceof Array ? [] : {};\n  for (var i in o) {\n    if (o.hasOwnProperty(i)) {\n      r[i] = deepClone(o[i]);\n    }\n  }\n  return r;\n};\n\nexport const addEventListeners = (element, events, func) => {\n  events.forEach((event) => {\n    element.addEventListener(event, func);\n  });\n};\n\nexport const generateRandomColor = () => {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\nexport const getPointOnArc = (x, y, radius, angle) => {\n  return {\n    x: x + Math.cos(angle) * radius,\n    y: y + Math.sin(angle) * radius,\n  };\n};\n\nexport const colorChangeTone = (color, amount) => {\n  amount = parseInt(amount);\n  return (\n    '#' +\n    color\n      .replace(/^#/, '')\n      .replace(/../g, (color) =>\n        (\n          '0' +\n          Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)\n        ).substr(-2)\n      )\n  );\n};\n\nexport const calcCenterOfPolygon = (points) => {\n  let polygon = points.map((point) => {\n      return [point.x, point.y];\n    }),\n    xs = polygon.map((x) => x[0]),\n    ys = polygon.map((y) => y[1]),\n    cx = (Math.min(...xs) + Math.max(...xs)) / 2,\n    cy = (Math.min(...ys) + Math.max(...ys)) / 2;\n  return {\n    x: cx,\n    y: cy,\n  };\n};\n\nexport const getIntersection = ({ A, B, C, D }) => {\n  let result = {\n    x: 0,\n    y: 0,\n    intersected: false,\n  };\n  if (!A || !B || !C || !D) return result;\n  let d =\n    ((C.x - A.x) * (B.y - A.y) - (B.x - A.x) * (C.y - A.y)) /\n    ((B.x - A.x) * (D.y - C.y) - (D.x - C.x) * (B.y - A.y));\n  result.x = C.x + (D.x - C.x) * d;\n  result.y = C.y + (D.y - C.y) * d;\n  result.intersected = (() => {\n    let v1 = (D.x - C.x) * (A.y - C.y) - (D.y - C.y) * (A.x - C.x),\n      v2 = (D.x - C.x) * (B.y - C.y) - (D.y - C.y) * (B.x - C.x),\n      v3 = (B.x - A.x) * (C.y - A.y) - (B.y - A.y) * (C.x - A.x),\n      v4 = (B.x - A.x) * (D.y - A.y) - (B.y - A.y) * (D.x - A.x);\n    return v1 * v2 < 0 && v3 * v4 < 0;\n  })();\n  return result;\n};\n\nexport const getContrastColor = (hex, bw) => {\n  if (hex.indexOf('#') === 0) {\n    hex = hex.slice(1);\n  }\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n  if (hex.length !== 6) {\n    throw new Error('Invalid HEX color.');\n  }\n  var r = parseInt(hex.slice(0, 2), 16),\n    g = parseInt(hex.slice(2, 4), 16),\n    b = parseInt(hex.slice(4, 6), 16);\n  if (bw) {\n    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#FFFFFF';\n  }\n  r = (255 - r).toString(16);\n  g = (255 - g).toString(16);\n  b = (255 - b).toString(16);\n  return '#' + padZero(r) + padZero(g) + padZero(b);\n};\n\nexport const isFunction = (func) => {\n  return {}.toString.call(func) === '[object Function]';\n};\n\nexport const prepareColor = (color) => {\n  if (color.length === 4) {\n    let nextColor = '#';\n    for (let i = 1; i <= color.length - 1; i++) {\n      nextColor += color[i] + color[i];\n    }\n    color = nextColor;\n  }\n  return color;\n};\n\nexport const intersectionPolygon = ({ x, y, polygon }) => {\n  var inside = false;\n  for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    var xi = polygon[i].x,\n      yi = polygon[i].y;\n    var xj = polygon[j].x,\n      yj = polygon[j].y;\n    var intersect =\n      yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n    if (intersect) inside = !inside;\n  }\n  return inside;\n};\n","import { deepClone } from './common';\n\nDate.prototype.formatting = function (format) {\n  var yyyy = this.getFullYear().toString();\n  format = format.replace(/yyyy/g, yyyy);\n  var mm = (this.getMonth() + 1).toString();\n  format = format.replace(/mm/g, mm[1] ? mm : '0' + mm[0]);\n  var dd = this.getDate().toString();\n  format = format.replace(/dd/g, dd[1] ? dd : '0' + dd[0]);\n  var hh = this.getHours().toString();\n  format = format.replace(/hh/g, hh[1] ? hh : '0' + hh[0]);\n  var ii = this.getMinutes().toString();\n  format = format.replace(/ii/g, ii[1] ? ii : '0' + ii[0]);\n  var ss = this.getSeconds().toString();\n  format = format.replace(/ss/g, ss[1] ? ss : '0' + ss[0]);\n  return format;\n};\n\nCanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {\n  if (w < 2 * r) r = w / 2;\n  if (h < 2 * r) r = h / 2;\n  this.beginPath();\n  this.moveTo(x + r, y);\n  this.arcTo(x + w, y, x + w, y + h, r);\n  this.arcTo(x + w, y + h, x, y + h, r);\n  this.arcTo(x, y + h, x, y, r);\n  this.arcTo(x, y, x + w, y, r);\n  this.closePath();\n  return this;\n};\n\nCanvasRenderingContext2D.prototype.drawCurve = function (points, config = {}) {\n  points = deepClone(points);\n  const { closePath } = config;\n\n  if (!points.length) {\n    return;\n  }\n\n  if (closePath) {\n    points[0] = {\n      x: (points[points.length - 1].x + points[1].x) / 2,\n      y: (points[points.length - 1].y + points[1].y) / 2,\n    };\n    points.push(points[0]);\n  }\n\n  this.beginPath();\n\n  this.moveTo(points[0].x, points[0].y);\n\n  let x, y;\n\n  for (let i = 0; i < points.length - 1; i++) {\n    x = (points[i].x + points[i + 1].x) / 2;\n    y = (points[i].y + points[i + 1].y) / 2;\n    this.quadraticCurveTo(points[i].x, points[i].y, x, y);\n  }\n\n  const lastPoint = points[points.length - 1];\n\n  this.quadraticCurveTo(lastPoint.x, lastPoint.y, lastPoint.x, lastPoint.y);\n  this.stroke();\n\n  return this;\n};\n\nCanvasRenderingContext2D.prototype.drawLineCurve = function (points) {\n  function diff(a, b) {\n    return (b.y - a.y) / (b.x - a.x);\n  }\n\n  const f = 0.3;\n  const t = 0.9;\n\n  points = deepClone(points);\n\n  this.beginPath();\n\n  this.moveTo(points[0].x, points[0].y);\n\n  let dx1 = 0;\n  let dy1 = 0;\n  let dx2 = 0;\n  let dy2 = 0;\n\n  for (let i = 1; i < points.length; i++) {\n    const prevPoint = points[i - 1];\n    const currentPoint = points[i];\n    const nextPoint = points[i + 1];\n\n    if (nextPoint) {\n      dx2 = (nextPoint.x - currentPoint.x) * -f;\n      dy2 = dx2 * diff(prevPoint, nextPoint) * t;\n    }\n\n    this.bezierCurveTo(\n      prevPoint.x - dx1,\n      prevPoint.y - dy1,\n      currentPoint.x + dx2,\n      currentPoint.y + dy2,\n      currentPoint.x,\n      currentPoint.y\n    );\n    dx1 = dx2;\n    dy1 = dy2;\n  }\n\n  this.stroke();\n\n  return this;\n};\n","export default {\n  offset: {\n    top: 20,\n    right: 20,\n    bottom: 40,\n    left: 60,\n  },\n  grid: {\n    enable: true,\n    offset: {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20,\n    },\n    styles: {\n      background: '',\n      borderColor: '#2b2a49',\n      borderRadius: 5,\n      borderWidth: 2,\n    },\n    horizontal: {\n      step: 4,\n      enable: true,\n    },\n    vertical: {\n      step: 10,\n      enable: true,\n    },\n  },\n  labels: {\n    enable: true,\n    styles: {\n      color: '#fff',\n      fontSize: 12,\n    },\n  },\n  values: {\n    enable: true,\n    digits: 2,\n    count: 10,\n    styles: {\n      color: '#fff',\n      fontSize: 12,\n    },\n  },\n  data: {\n    enable: true,\n    offset: 0,\n    digits: 2,\n    line: {\n      offset: {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n      },\n      dots: {\n        enable: true,\n        width: 5,\n        hover: {\n          enable: true,\n          width: 3\n        }\n      },\n      styles: {\n        lineWidth: 2,\n      },\n    },\n    bar: {\n      offset: 10,\n      hover: {\n        enable: true,\n        value: 50\n      }\n    }\n  },\n};\n","export default {\n  animated: true,\n  view: {\n    styles: {\n      background: '#1a1e30',\n    },\n  },\n  data: {\n    hover: {\n      enable: true\n    }\n  },\n  tooltip: {\n    enable: true,\n    styles: {\n      color: '#ffffff',\n      background: '#403f4c',\n      borderColor: '#fff',\n      borderWidth: 0,\n      borderRadius: 3,\n      fontSize: 12,\n      padding: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10,\n      },\n    },\n  },\n};\n","import { deepMerge, deepClone, isFunction, colorChangeTone } from '../common';\nimport commonDefaultSettings from './commonDefaultSettings';\nexport default class Chart {\n  constructor(props) {\n    let {\n      canvas = false,\n      data = {},\n      defaultSettings = {},\n      settings = {},\n      actions = {},\n      type,\n    } = props;\n    this.type = type;\n    this.actions = actions;\n    this.canvas = {\n      element: canvas,\n      context: canvas.getContext('2d'),\n      isCanvas:\n        (canvas instanceof Element || canvas instanceof HTMLDocument) &&\n        canvas.tagName.toLowerCase() === 'canvas',\n    };\n    this.cursor = { x: 0, y: 0 };\n    this.settings = deepMerge(\n      deepClone(commonDefaultSettings),\n      deepClone(defaultSettings)\n    );\n    this.timeStamp = +new Date();\n    this.setSettings(settings);\n    this.state = {\n      loading: this.settings.animated ? 0 : 1,\n    };\n    this.data = this.prepareData(data);\n    this.commonInit();\n  }\n  prepareData(data) {\n    return data;\n  }\n  setSettings(newSettings = {}) {\n    deepMerge(this.settings, newSettings);\n    this.render({\n      from: 'setSettings',\n    });\n  }\n  getSettings() {\n    return this.settings;\n  }\n  setData(data) {\n    this.data = this.prepareData(data);\n    this.render({\n      from: 'setData',\n    });\n  }\n  getData() {\n    return this.data;\n  }\n  setRatio() {\n    let { canvas } = this,\n      { context, element } = canvas,\n      ratio = window.devicePixelRatio || 1;\n    element.width = element.clientWidth * ratio;\n    element.height = element.clientHeight * ratio;\n    context.scale(ratio, ratio);\n  }\n  clearCanvas() {\n    let { canvas } = this,\n      { context, element } = canvas;\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  loading() {\n    if (this.state.loading >= 1) return;\n    setTimeout(() => {\n      this.state.loading += 60 / 2000;\n      this.state.loading = this.state.loading > 1 ? 1 : this.state.loading;\n      this.render({\n        from: 'loading',\n      });\n      this.loading();\n    }, 1000 / 60);\n  }\n  commonInit() {\n    this.render({\n      from: 'commonInit',\n    });\n    this.loading();\n    this.commonListeners();\n  }\n  commonListeners() {\n    let { canvas } = this,\n      { context, element } = canvas;\n    window.addEventListener('resize', () => {\n      this.render({\n        from: 'resize',\n      });\n    });\n    element.addEventListener('mousemove', (e) => {\n      let { settings } = this,\n        elementOffset = element.getBoundingClientRect(),\n        x = e.clientX - elementOffset.left,\n        y = e.clientY - elementOffset.top;\n      this.cursor = {\n        x,\n        y,\n      };\n      this.render({\n        from: 'mousemove',\n      });\n    });\n    element.addEventListener('mouseout', (e) => {\n      this.cursor = {\n        x: 0,\n        y: 0,\n      };\n      this.render({\n        from: 'mouseout',\n      });\n    });\n  }\n  drawTooltip({ title = '', panels = [], x, y, render } = {}) {\n    let { canvas, settings, data = [], cursor } = this,\n      { element, context } = canvas,\n      { tooltip } = settings,\n      { styles } = tooltip;\n    if (!x) x = cursor.x;\n    if (!y) y = cursor.y;\n    if (tooltip && tooltip.enable) {\n      context.font = '100 ' + styles.fontSize + 'px arial';\n      context.textAlign = 'left';\n      context.textBaseline = 'middle';\n      let { width, height } = (() => {\n          let width = 0,\n            height = 0;\n          if (title && title.text) {\n            title.width =\n              context.measureText(title.text).width +\n              styles.padding.left +\n              styles.padding.right +\n              styles.borderWidth;\n            title.height =\n              styles.padding.top * 2 +\n              styles.fontSize * 1.286 +\n              styles.borderWidth / 2;\n            title.x = styles.padding.left + styles.borderWidth / 2;\n            title.y = title.height / 2 + styles.borderWidth / 2;\n          } else {\n            title = {\n              width: 0,\n              height: 0,\n            };\n          }\n          if (panels.length) {\n            panels.forEach((panel, index) => {\n              panel.width = 0;\n              panel.height = 0;\n              panel.x = (() => {\n                let prevWidth = 0;\n                for (let i = index - 1; i >= 0; i--) {\n                  prevWidth += panels[i].width;\n                }\n                return prevWidth;\n              })();\n              panel.y = title.height;\n              if (panel.colorPanel && panel.colorPanel.color) {\n                panel.colorPanel.height = 3;\n                panel.colorPanel.x = styles.borderWidth / 2;\n                panel.colorPanel.y = 0;\n                panel.height += panel.colorPanel.height;\n              }\n              if (panel.texts) {\n                panel.texts.forEach((text, index) => {\n                  if (text.text) {\n                    let currentWidth =\n                      context.measureText(text.text).width + styles.borderWidth;\n                    if (panel.width < currentWidth) panel.width = currentWidth;\n                    text.height = styles.fontSize * 1.286;\n                    text.x = styles.padding.left + styles.borderWidth / 2;\n                    text.y = panel.height + text.height / 2;\n                    if (!index) {\n                      text.height += styles.padding.top;\n                      text.y += styles.padding.top;\n                    }\n                    if (index === panel.texts.length - 1) {\n                      text.height += styles.padding.bottom;\n                    }\n                    panel.height += text.height;\n                  }\n                });\n              }\n              if (panel.footer && panel.footer.text) {\n                let currentWidth =\n                  context.measureText(panel.footer.text).width +\n                  styles.borderWidth;\n                if (panel.width < currentWidth) panel.width = currentWidth;\n                panel.footer.height =\n                  styles.padding.bottom + styles.fontSize * 1.286;\n                panel.footer.x = styles.padding.left + styles.borderWidth / 2;\n                panel.footer.y =\n                  panel.height +\n                  panel.footer.height / 2 -\n                  styles.padding.bottom / 2;\n                panel.height += panel.footer.height + styles.borderWidth / 2;\n              }\n              panel.width += styles.padding.left + styles.padding.right;\n            });\n          }\n          let panelsWidth = panels.reduce((acc, panel) => acc + panel.width, 0);\n          if (title.width > panelsWidth) {\n            let panelWidth = title.width / panels.length,\n              minCount = 0,\n              oversizeWidth = 0;\n            for (let i = 0; i <= panels.length - 1; i++) {\n              if (panels[i].width >= panelWidth) {\n                oversizeWidth += panels[i].width - panelWidth;\n              } else {\n                minCount++;\n              }\n            }\n            for (let i = 0; i <= panels.length - 1; i++) {\n              panels[i].width =\n                panels[i].width < panelWidth\n                  ? panelWidth - oversizeWidth / minCount\n                  : panels[i].width;\n              panels[i].x = (() => {\n                let prevWidth = 0;\n                for (let j = i - 1; j >= 0; j--) {\n                  prevWidth += panels[j].width;\n                }\n                return prevWidth;\n              })();\n            }\n          }\n          height =\n            title.height +\n            (panels.length\n              ? Math.max(...panels.map((panel) => panel.height))\n              : 0);\n          width = Math.max(title.width, panelsWidth);\n          return {\n            width,\n            height,\n          };\n        })(),\n        center = x,\n        topOffset = 10,\n        left = x - width / 2,\n        invert = false,\n        top = y - height - topOffset;\n      if (top < styles.borderWidth) {\n        invert = true;\n        top = y + topOffset;\n      }\n      if (left + width > element.clientWidth - styles.borderWidth / 2) {\n        left = element.clientWidth - width - styles.borderWidth / 2;\n      }\n      if (left < styles.borderWidth / 2) left = styles.borderWidth / 2;\n      context.fillStyle = styles.background;\n      context.strokeStyle =\n        styles.borderWidth > 0 ? styles.borderColor : 'transparent';\n      context.lineWidth = styles.borderWidth;\n      context.beginPath();\n      context.roundRect(left, top, width, height, styles.borderRadius);\n      context.closePath();\n      context.fill();\n      context.stroke();\n      if (invert) {\n        context.beginPath();\n        context.moveTo(center - 5, top);\n        context.lineTo(center, top - 5);\n        context.lineTo(center + 5, top);\n        context.fill();\n        context.stroke();\n        context.beginPath();\n        context.moveTo(\n          center - 5 + styles.borderWidth / 4,\n          top + styles.borderWidth / 2\n        );\n        context.lineTo(center, top - 5 + styles.borderWidth / 1.5);\n        context.lineTo(\n          center + 5 - styles.borderWidth / 4,\n          top + styles.borderWidth / 2\n        );\n        context.fill();\n      } else {\n        context.beginPath();\n        context.moveTo(center - 5, top + height);\n        context.lineTo(center, top + height + 5);\n        context.lineTo(center + 5, top + height);\n        context.fill();\n        context.stroke();\n        context.beginPath();\n        context.moveTo(\n          center - 5 + styles.borderWidth / 4,\n          top + height - styles.borderWidth / 2\n        );\n        context.lineTo(center, top + height + 5 - styles.borderWidth / 1.5);\n        context.lineTo(\n          center + 5 - styles.borderWidth / 4,\n          top + height - styles.borderWidth / 2\n        );\n        context.fill();\n      }\n\n      context.fillStyle = styles.color;\n      if (title && title.text) {\n        context.fillText(title.text, left + title.x, top + title.y);\n      }\n      panels.forEach((panel) => {\n        context.fillStyle = styles.color;\n        if (panel.colorPanel && panel.colorPanel.color) {\n          context.save();\n          context.fillStyle = panel.colorPanel.color;\n          context.beginPath();\n          context.rect(\n            left + panel.x + panel.colorPanel.x,\n            top + panel.y + panel.colorPanel.y,\n            panel.width - styles.borderWidth,\n            panel.colorPanel.height\n          );\n          context.fill();\n          context.restore();\n        }\n        if (panel.texts) {\n          panel.texts.forEach((text, i) => {\n            if (text.text) {\n              context.fillText(\n                text.text,\n                left + panel.x + text.x,\n                top + panel.y + text.y\n              );\n            }\n          });\n        }\n        if (panel.footer && panel.footer.text) {\n          context.fillStyle = colorChangeTone(styles.color, -50);\n          context.fillText(\n            panel.footer.text,\n            left + panel.x + panel.footer.x,\n            top + panel.y + panel.footer.y\n          );\n        }\n      });\n      if (render && isFunction(render)) {\n        render({\n          context,\n          styles,\n          box: {\n            width,\n            height,\n            top: top,\n            left: left,\n            bottom: top + height,\n            right: left + width,\n          },\n        });\n      }\n    }\n  }\n  drawBackground() {\n    let { canvas, settings } = this,\n      { view } = settings,\n      { context, element } = canvas,\n      { background } = view.styles;\n    context.fillStyle = background;\n    context.fillRect(0, 0, element.width, element.height);\n  }\n  hover({ item, isHovered }) {\n    let { settings } = this,\n      step = 1 / 20;\n    if (isHovered && settings?.data?.hover?.enable) {\n      if (!item.hasOwnProperty('state')) item.state = 0;\n      let hoveredValue = settings?.data?.hover?.value || 0;\n      if (settings.animated) {\n        if (item.state < 1) {\n          item.state += step;\n          if (item.state > 1) item.state = 1;\n          this.render({\n            from: 'Animated increase state',\n          });\n        }\n      } else {\n        item.state = 1;\n        this.render({\n          from: 'Increase state',\n        });\n      }\n    } else {\n      if (settings.animated) {\n        if (item.state > 0) {\n          item.state -= step;\n          if (item.state < 0) item.state = 0;\n          this.render({\n            from: 'Animated decrease state',\n          });\n        }\n      } else {\n        item.state = 0;\n        this.render({\n          from: 'Decrease state',\n        });\n      }\n    }\n  }\n  baseRender() {\n    this.setRatio();\n    this.clearCanvas();\n    this.drawBackground();\n  }\n}\n","import {\n  generateRandomColor,\n  generateDate,\n  deepMerge,\n  getPointOnArc,\n  colorChangeTone,\n  getContrastColor,\n  prepareColor,\n} from '../../common';\nimport defaultSettings from './defaultSettings';\nimport Chart from '../chart';\n\nexport default class Plot extends Chart {\n  constructor(props) {\n    props.defaultSettings = defaultSettings;\n    super(props);\n  }\n  prepareData(data) {\n    let maxLength = Math.max(\n      ...data.datasets.map((datasets) => (datasets.values || []).length)\n    );\n    [...data.datasets.map((dataset) => dataset.values)].map(\n      (current, index) => {\n        if (current.length < maxLength) {\n          let countDiff = maxLength - current.length - 1;\n          for (let i = 0; i <= countDiff; i++) {\n            current.push(index ? 0 : '');\n          }\n        }\n      }\n    );\n    data.datasets.forEach((dataset) => {\n      if (!dataset.color) dataset.color = generateRandomColor();\n      dataset.color = prepareColor(dataset.color);\n      dataset.values.forEach((value, index) => {\n        dataset.values[index] = {\n          name: dataset.name,\n          color: prepareColor(dataset.color),\n          index,\n          value,\n          state: 0,\n        };\n      });\n    });\n    data.labels?.forEach((label, index) => {\n      data.labels[index] = {\n        text: label,\n      };\n    });\n    let bars = data.datasets.filter((dataset) => {\n      return dataset.type === 'bar';\n    });\n    bars.forEach((bar, index) => {\n      bar.count = bars.length;\n      bar.index = index + 1;\n    });\n    if (bars.length) {\n      this.settings.data.initialValue = 0;\n      let drawRect = this.getDrawRect('bar'),\n        drawStart = drawRect.left,\n        partWidth = drawRect.width / maxLength;\n      this.settings.data.line.offset.left = partWidth / 2;\n      this.settings.data.line.offset.right = partWidth / 2;\n    }\n    return data;\n  }\n  getInterpolation(value, values) {\n    let { canvas, settings } = this,\n      { data, offset, grid } = settings,\n      { element, context } = canvas,\n      { line } = data,\n      { lineWidth } = line.styles,\n      max = Math.max(...values),\n      min = Math.min(...values),\n      top = offset.top + grid.offset.top + grid.styles.borderWidth,\n      percent =\n        ((value * this.state.loading -\n          min * (min > 0 ? this.state.loading : 1)) *\n          100) /\n        (max - min) /\n        100,\n      height =\n        element.clientHeight -\n        offset.top -\n        grid.offset.top -\n        offset.bottom -\n        grid.offset.bottom -\n        grid.styles.borderWidth * 2,\n      y = top + height - height * percent;\n    return y;\n  }\n  drawGrid() {\n    let { canvas, settings } = this,\n      { grid, offset } = settings,\n      { element, context } = canvas,\n      { enable, horizontal, vertical, styles } = grid;\n    if (!enable) return;\n    context.save();\n    let left = 0 + offset.left,\n      right = element.clientWidth - offset.right - offset.left,\n      top = 0 + offset.top,\n      bottom = element.clientHeight - offset.bottom - offset.top;\n    context.lineWidth = styles.borderWidth;\n    context.strokeStyle = styles.borderColor;\n    context.fillStyle = styles.background;\n    if (styles.dash) context.setLineDash(styles.dash);\n    context.beginPath();\n    context.roundRect(left, top, right, bottom, styles.borderRadius);\n    context.fill();\n    context.closePath();\n    context.stroke();\n    context.restore();\n    //horizontal lines\n    if (horizontal && horizontal.enable) {\n      context.save();\n      let horizonalArray = [],\n        horizontalStep =\n          (element.clientHeight - offset.top - offset.bottom) /\n          (horizontal.step + 1),\n        horizontalStepPx =\n          (element.clientHeight - offset.top - offset.bottom) / horizontal.step,\n        yStart = offset.top,\n        horizontalStyles = {\n          ...styles,\n          ...(horizontal.styles || {}),\n        },\n        horizontalType = horizontal.type || grid.type;\n      if (horizontalType === 'px') {\n        for (let i = 1; i < horizontalStepPx; i++) {\n          let y = yStart + i * horizontal.step;\n          horizonalArray.push(y);\n        }\n      } else {\n        for (let i = 1; i < horizontal.step + 1; i++) {\n          let y = yStart + i * horizontalStep;\n          horizonalArray.push(y);\n        }\n      }\n      context.lineWidth = horizontalStyles.borderWidth;\n      context.strokeStyle = horizontalStyles.borderColor;\n      if (horizontalStyles.dash) {\n        context.setLineDash(horizontalStyles.dash);\n      }\n      for (let i = 0; i <= horizonalArray.length - 1; i++) {\n        context.beginPath();\n        context.lineTo(0 + offset.left, horizonalArray[i]);\n        context.lineTo(element.clientWidth - offset.right, horizonalArray[i]);\n        context.stroke();\n      }\n      context.restore();\n    }\n\n    //verical lines\n    if (vertical && vertical.enable) {\n      context.save();\n      let verticalArray = [],\n        verticalStep =\n          (element.clientWidth - offset.right - offset.left) /\n          (vertical.step + 1),\n        verticalStepPx =\n          (element.clientWidth - offset.right - offset.left) / vertical.step,\n        xStart = offset.left,\n        verticalStyles = {\n          ...styles,\n          ...(vertical.styles || {}),\n        },\n        verticalType = vertical.type || grid.type;\n\n      if (verticalType === 'px') {\n        for (let i = 1; i < verticalStepPx; i++) {\n          let x = xStart + i * vertical.step;\n          verticalArray.push(x);\n        }\n      } else {\n        for (let i = 1; i < vertical.step + 1; i++) {\n          let x = xStart + i * verticalStep;\n          verticalArray.push(x);\n        }\n      }\n      context.lineWidth = verticalStyles.borderWidth;\n      context.strokeStyle = verticalStyles.borderColor;\n      if (verticalStyles.dash) {\n        context.setLineDash(verticalStyles.dash);\n      }\n      for (let i = 0; i <= verticalArray.length - 1; i++) {\n        context.beginPath();\n        context.lineTo(verticalArray[i], 0 + offset.top);\n        context.lineTo(verticalArray[i], element.clientHeight - offset.bottom);\n        context.stroke();\n      }\n      context.restore();\n    }\n    context.restore();\n  }\n  drawLabels() {\n    let { canvas, settings, data } = this,\n      { labels, offset, grid } = settings,\n      { element, context } = canvas,\n      { enable, styles } = labels;\n\n    if (!enable || !data.labels?.length) {\n      return;\n    }\n\n    const count = data.labels.length;\n\n    let drawRect = this.getDrawRect('line'),\n      viewRect = this.getDrawRect('view'),\n      width = drawRect.width / (count - 1),\n      start = drawRect.left,\n      y = element.clientHeight - offset.bottom / 2;\n\n    width = isFinite(width) ? width : drawRect.width;\n\n    data.labels.forEach((label, index) => {\n      let x = start + width * index;\n      context.font = '100 ' + styles.fontSize + 'px arial';\n      context.fillStyle = styles.color;\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n\n      if (!index) {\n        label.xStart = viewRect.left;\n        label.xEnd = x + width / 2;\n      } else if (index === count - 1) {\n        label.xStart = x - width / 2;\n        label.xEnd = viewRect.width + viewRect.left;\n      } else {\n        label.xStart = x - width / 2;\n        label.xEnd = x + width / 2;\n      }\n      context.fillText(label.text, x, y);\n    });\n  }\n  getDatasets() {\n    let { data } = this;\n    return data.datasets;\n  }\n  getAllValues() {\n    let { data } = this.settings,\n      acc = [];\n    if (data.initialValue || data.initialValue === 0)\n      acc.push(data.initialValue);\n    let datasets = this.getDatasets(),\n      result = datasets.reduce((acc, dataset) => {\n        return [...acc, ...dataset.values.map((value) => value.value)];\n      }, acc);\n    return result;\n  }\n  drawValues() {\n    let { canvas, settings } = this,\n      { values, offset, grid } = settings,\n      { element, context } = canvas,\n      { enable, styles, digits } = values;\n    if (!enable) return;\n    let x = offset.left / 2,\n      allValues = this.getAllValues(),\n      max = Math.max(...allValues),\n      min = Math.min(...allValues);\n    context.font = '100 ' + styles.fontSize + 'px arial';\n    context.fillStyle = styles.color;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    let { count } = values,\n      texts = [],\n      stepDiff = (max - min) / (count - 1);\n    for (let i = 0; i <= count - 1; i++) {\n      let value = max - stepDiff * i;\n      texts.push({\n        value: i === 0 ? max : i === count - 1 ? min : value,\n        x,\n        y: this.getInterpolation(value, allValues),\n      });\n    }\n    texts.forEach((text) => {\n      context.fillText(text.value.toFixed(digits), text.x, text.y);\n    });\n  }\n  drawData() {\n    let { settings } = this,\n      { data } = settings,\n      { enable } = data,\n      datasets = this.getDatasets();\n    if (!enable) return;\n    let bars = datasets.filter((dataset) => {\n      return dataset.type === 'bar';\n    });\n    bars.forEach((dataset) => {\n      let { type } = dataset;\n      type = type.toUpperCase();\n      this['draw' + type] && this['draw' + type](dataset);\n    });\n    let lines = datasets.filter((dataset) => {\n      return dataset.type === 'line' || dataset.type === 'dot';\n    });\n    lines.forEach((dataset) => {\n      let { type } = dataset;\n      type = type.toUpperCase();\n      this.drawLINE(dataset);\n    });\n  }\n  getDrawRect(type) {\n    let { canvas, settings } = this,\n      { offset, grid, data } = settings,\n      { element, context } = canvas,\n      viewRect = {\n        top: offset.top + grid.styles.borderWidth,\n        left: offset.left + grid.styles.borderWidth,\n        right: offset.right + grid.styles.borderWidth,\n        bottom: offset.bottom - grid.styles.borderWidth,\n        width:\n          element.clientWidth -\n          offset.left -\n          offset.right -\n          grid.styles.borderWidth * 2,\n        height:\n          element.clientHeight -\n          offset.top -\n          offset.bottom -\n          grid.styles.borderWidth * 2,\n      },\n      gridRect = {\n        top: viewRect.top + grid.offset.top,\n        left: viewRect.left + grid.offset.left,\n        right: viewRect.right + grid.offset.right,\n        bottom: viewRect.bottom - grid.offset.bottom,\n        width: viewRect.width - grid.offset.left - grid.offset.right,\n        height: viewRect.height - grid.offset.top - grid.offset.bottom,\n      },\n      barRect = gridRect,\n      lineRect = {\n        ...gridRect,\n        left: gridRect.left + data.line.offset.left,\n        right: gridRect.right + data.line.offset.right,\n        width: gridRect.width - data.line.offset.left - data.line.offset.right,\n      },\n      obj = {\n        view: viewRect,\n        grid: gridRect,\n        bar: barRect,\n        line: lineRect,\n      };\n    return type && obj[type] ? obj[type] : obj;\n  }\n  drawLINE(dataset) {\n    let { canvas, settings } = this,\n      { data, offset, grid } = settings,\n      { element, context } = canvas,\n      { line } = data,\n      { lineWidth } = line.styles,\n      { values, color, smooth } = dataset,\n      drawRect = this.getDrawRect('line'),\n      viewRect = this.getDrawRect('view'),\n      drawStart = drawRect.left,\n      partWidth =\n        drawRect.width / (values.length === 1 ? 1 : values.length - 1);\n    values.forEach((value, index) => {\n      let x = drawStart + partWidth * index,\n        y = this.getInterpolation(value.value, this.getAllValues());\n      value.x = x;\n      value.y = y;\n      value.isFirst = !index;\n      value.isLast = index === values.length - 1;\n      value.area = {\n        xStart: value.isFirst ? viewRect.left : x - partWidth / 2,\n        yStart: drawRect.top,\n        xEnd: value.isLast\n          ? element.clientWidth - viewRect.right\n          : x + partWidth / 2,\n        yEnd: drawRect.top + drawRect.height,\n      };\n      this.checkIsHovered(value);\n    });\n    if (dataset.type === 'line') {\n      context.strokeStyle = dataset.color;\n      context.lineWidth = lineWidth;\n      context.lineJoin = 'round';\n      if (smooth) {\n        context.drawLineCurve(values);\n      } else {\n        context.beginPath();\n        values.forEach((value, index) => {\n          if (!index) {\n            context.moveTo(value.x, value.y);\n          } else {\n            context.lineTo(value.x, value.y);\n          }\n        });\n        context.stroke();\n      }\n    }\n    if (dataset.type === 'dot' || line?.dots?.enable) {\n      context.fillStyle = dataset.color;\n      context.strokeStyle = colorChangeTone(dataset.color, -50);\n      values.forEach((value, index) => {\n        context.beginPath();\n        context.arc(\n          value.x,\n          value.y,\n          line.dots.width +\n            (line.dots.hover.enable ? line.dots.hover.width * value.state : 0),\n          0,\n          2 * Math.PI\n        );\n        context.fill();\n        context.closePath();\n        context.stroke();\n      });\n    }\n  }\n  drawBAR(dataset) {\n    let { canvas, settings, cursor } = this,\n      { data } = settings,\n      { element, context } = canvas,\n      { bar } = data,\n      { values } = dataset,\n      drawRect = this.getDrawRect('bar'),\n      viewRect = this.getDrawRect('view'),\n      drawStart = drawRect.left,\n      partWidth = drawRect.width / values.length;\n    data.line.offset.left = partWidth / 2;\n    data.line.offset.right = partWidth / 2;\n    values.forEach((value, index) => {\n      value.isFirst = !index;\n      value.isLast = index === values.length - 1;\n      context.beginPath();\n      let color = colorChangeTone(\n        dataset.color,\n        bar?.hover?.enable ? bar.hover.value * value.state : 1\n      );\n      context.strokeStyle = color;\n      context.fillStyle = color;\n      let barWidth = partWidth / dataset.count - bar.offset / dataset.count,\n        x =\n          drawStart +\n          bar.offset / 2 +\n          partWidth * index +\n          barWidth * (dataset.index - 1),\n        xStart = x,\n        xEnd = x + barWidth,\n        y = this.getInterpolation(value.value, this.getAllValues()),\n        y0 = this.getInterpolation(0, this.getAllValues());\n      value.area = {\n        xStart: value.isFirst ? viewRect.left : drawStart + partWidth * index,\n        yStart: drawRect.top,\n        xEnd: value.isLast\n          ? element.clientWidth - viewRect.right\n          : drawStart +\n            partWidth * index +\n            barWidth * dataset.count +\n            bar.offset,\n        yEnd: drawRect.top + drawRect.height,\n      };\n      this.checkIsHovered(value);\n      context.moveTo(xStart, y0);\n      context.lineTo(xStart, y);\n      context.lineTo(xEnd, y);\n      context.lineTo(xEnd, y0);\n      context.fill();\n    });\n  }\n  checkIsHovered(item) {\n    let { cursor } = this,\n      { area } = item,\n      bool =\n        cursor.x >= area.xStart &&\n        cursor.x < area.xEnd &&\n        cursor.y >= area.yStart &&\n        cursor.y < area.yEnd;\n    item.isHovered = bool;\n    super.hover({\n      item,\n      isHovered: bool,\n    });\n    return bool;\n  }\n  drawTooltip() {\n    let { settings, data, cursor } = this,\n      hovered = data.datasets.map((dataset) => {\n        return dataset.values.filter((value) => value.isHovered);\n      });\n    hovered = hovered.reduce((acc, panel) => {\n      return [...acc, ...panel];\n    }, []);\n    if (!hovered.length) return;\n    let labels = data.labels.filter((label) => {\n        return label.xStart <= cursor.x && label.xEnd >= cursor.x;\n      }),\n      label = labels[labels.length - 1];\n    super.drawTooltip({\n      title: {\n        text: label?.text || '',\n      },\n      panels: hovered.map((panel) => ({\n        colorPanel: {\n          color: panel.color,\n        },\n        texts: [\n          {\n            text: 'Value: ' + panel.value.toFixed(settings.data.digits),\n          },\n        ],\n        footer: {\n          text: panel.name,\n        },\n      })),\n      render: (obj) => {},\n    });\n  }\n  render(info = {}) {\n    let time = 300;\n    if (this.renderTimeout) clearTimeout(this.renderTimeout);\n    this.renderTimeout = setTimeout(() => {\n      super.baseRender();\n      this.drawGrid();\n      this.drawLabels();\n      this.drawData();\n      this.drawValues();\n      this.drawTooltip();\n    }, time / 60);\n  }\n}\n","export default {\n  offset: {\n    top: 30,\n    right: 30,\n    bottom: 30,\n    left: 30,\n  },\n  data: {\n    volumed: true,\n    hover: {\n      value: 20\n    },\n    styles: {\n      width: 80,\n      color: '#fff',\n    },\n  },\n  texts: {\n    center: {\n      enable: false,\n      text: '100%',\n      styles: {\n        color: '#ffffff',\n        fontSize: 30,\n      },\n    },\n    slicePercent: {\n      enable: false,\n      styles: {\n        color: '#ffffff',\n        fontSize: 10,\n      },\n    },\n  },\n};\n","import {\n  generateRandomColor,\n  generateDate,\n  getPointOnArc,\n  colorChangeTone,\n  getContrastColor,\n  intersectionPolygon,\n} from '../../common';\nimport defaultSettings from './defaultSettings';\nimport Chart from '../chart';\n\nexport default class Slices extends Chart {\n  constructor(props) {\n    props.defaultSettings = defaultSettings;\n    super(props);\n  }\n  prepareData(data = []) {\n    data = data.filter((item) => {\n      return item.value > 0;\n    });\n    let total = data.reduce(\n      (acc, item) => acc + (parseFloat(item.value) || 0),\n      0\n    );\n    data.forEach((item) => {\n      item.percent = (100 / total) * item.value;\n      item.total = total;\n      item.color = item.color || generateRandomColor();\n      item.state = item.state || 0;\n    });\n    return data;\n  }\n  generatePolygon({ count = 20, x, y, radius, sliceWidth, startPi, endPi }) {\n    let polygon = [],\n      temp = (endPi - startPi) / count;\n    temp = isFinite(temp) ? temp : 0;\n    for (let i = 0; i <= count; i++) {\n      polygon.push(\n        getPointOnArc(x, y, radius + sliceWidth / 2, startPi + temp * i)\n      );\n    }\n    for (let i = 0; i <= count; i++) {\n      polygon.push(\n        getPointOnArc(x, y, radius - sliceWidth / 2, endPi - temp * i)\n      );\n    }\n    return polygon;\n  }\n  drawSlices() {\n    let { canvas, settings, data, cursor, type, state } = this,\n      { context, element } = canvas,\n      sideSize =\n        Math.min(\n          element.clientHeight -\n            settings.offset.top -\n            settings.offset.bottom -\n            (type === 'donut' ? settings.data.styles.width : 0),\n          element.clientWidth -\n            settings.offset.left -\n            settings.offset.right -\n            (type === 'donut' ? settings.data.styles.width : 0)\n        ) * state.loading,\n      sliceWidth,\n      radius,\n      x =\n        element.clientWidth / 2 + settings.offset.left - settings.offset.right,\n      y =\n        element.clientHeight / 2 + settings.offset.top - settings.offset.bottom,\n      { volumed } = settings.data,\n      piOffset = -(Math.PI / 2);\n    if (type === 'pie') {\n      sliceWidth = sideSize / 2;\n      radius = sideSize / 4;\n    }\n    if (type === 'donut') {\n      if (settings.data.styles.width >= sideSize) {\n        sliceWidth = sideSize;\n      } else {\n        sliceWidth = settings.data.styles.width;\n      }\n      radius = sideSize / 2;\n    }\n    for (let i = 0; i <= data.length - 1; i++) {\n      let startPi = piOffset,\n        endPi =\n          (2 * Math.PI * state.loading * data[i].percent) / 100 + piOffset,\n        hoveredValue = settings.data.hover.value * data[i].state;\n      data[i].startPi = startPi;\n      data[i].endPi = endPi;\n      piOffset = endPi;\n      let polygon = this.generatePolygon({\n          x,\n          y,\n          radius: radius + hoveredValue / 2,\n          sliceWidth: sliceWidth + hoveredValue,\n          startPi,\n          endPi,\n        }),\n        mouseInPath = intersectionPolygon({\n          x: cursor.x,\n          y: cursor.y,\n          polygon,\n        });\n      data[i].polygon = polygon;\n      data[i].hovered = mouseInPath;\n\n      super.hover({\n        item: data[i],\n        isHovered: data[i].hovered,\n      });\n\n      let ring = [];\n      ring.push({\n        radius: radius + hoveredValue / 2,\n        width: sliceWidth + hoveredValue,\n        color: colorChangeTone(data[i].color, hoveredValue),\n        x,\n        y,\n        startPi,\n        endPi,\n      });\n      if (volumed) {\n        let volumeRadius, volumeWidth;\n        if (type === 'donut') {\n          volumeRadius = radius - sliceWidth / 4 + hoveredValue / 2;\n          volumeWidth = sliceWidth / 2 + hoveredValue;\n        }\n        if (type === 'pie') {\n          volumeRadius = radius - sliceWidth / 6 + hoveredValue / 2;\n          volumeWidth = volumeRadius * 2;\n        }\n        ring.push({\n          radius: volumeRadius,\n          width: volumeWidth,\n          color: colorChangeTone(data[i].color, -50 + hoveredValue),\n          x,\n          y,\n          startPi,\n          endPi,\n        });\n      }\n\n      for (let r = 0; r <= ring.length - 1; r++) {\n        context.save();\n        context.beginPath();\n        context.strokeStyle = ring[r].color;\n        context.lineWidth = ring[r].width;\n        context.fillStyle = 'transparent';\n        context.arc(\n          ring[r].x,\n          ring[r].y,\n          ring[r].radius > 0 ? ring[r].radius : 0,\n          ring[r].startPi,\n          ring[r].endPi\n        );\n        context.fill();\n        context.stroke();\n        context.restore();\n      }\n    }\n    if (settings.texts.slicePercent.enable) {\n      for (let i = 0; i <= data.length - 1; i++) {\n        context.font =\n          '100 ' + settings.texts.slicePercent.styles.fontSize + 'px arial';\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.fillStyle = settings.texts.slicePercent.styles.color;\n        let percentRadius = radius,\n          hoveredValue = settings.data.hover.value * data[i].state;\n        if (type === 'donut' && volumed) {\n          percentRadius += sliceWidth / 4 + hoveredValue;\n        }\n        if (type === 'donut' && !volumed) {\n          percentRadius += hoveredValue / 2;\n        }\n        if (type === 'pie' && volumed) {\n          percentRadius += sliceWidth / 3 + hoveredValue;\n        }\n        if (type === 'pie' && !volumed) {\n          percentRadius += hoveredValue / 2;\n        }\n        let pointText = parseFloat(data[i].percent.toFixed(2)) + '%',\n          point = getPointOnArc(\n            x,\n            y,\n            percentRadius,\n            (data[i].startPi + data[i].endPi) / 2\n          );\n        context.fillText(pointText, point.x, point.y);\n      }\n    }\n    //draw center\n    if (settings.texts.center.enable) {\n      context.font =\n        '800 ' +\n        settings.texts.center.styles.fontSize * state.loading +\n        'px arial';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.fillStyle = settings.texts.center.styles.color;\n      context.fillText(settings.texts.center.text, x, y);\n    }\n  }\n  drawTooltip() {\n    let hovered = this.data.find((item) => {\n      return item.hovered;\n    });\n    if (hovered) {\n      super.drawTooltip({\n        title: {\n          text: hovered.label,\n        },\n        panels: [\n          {\n            colorPanel: {\n              color: hovered.color,\n            },\n            texts: [\n              {\n                text: 'Value: ' + hovered.value,\n              },\n              {\n                text: 'Percent: ' + hovered.percent.toFixed(2) + '%',\n              },\n            ],\n            footer: {\n              text: 'Total: ' + hovered.total,\n            },\n          },\n        ],\n        render: (obj) => {},\n      });\n    }\n  }\n  render(info = {}) {\n    let time = 300;\n    if (this.renderTimeout) clearTimeout(this.renderTimeout);\n    this.renderTimeout = setTimeout(() => {\n      super.baseRender();\n      this.drawSlices();\n      this.drawTooltip();\n    }, time / 60);\n  }\n}\n","import Slice from '../Slice';\n\nexport default class Donut extends Slice {\n  constructor(props) {\n    props.type = 'donut';\n    super(props);\n  }\n}\n","import Slice from '../Slice';\n\nexport default class Pie extends Slice {\n  constructor(props) {\n    props.type = 'pie';\n    super(props);\n  }\n}\n","export default {\n  offset: {\n    top: 40,\n    right: 40,\n    bottom: 40,\n    left: 40,\n  },\n  scheme: {\n    count: 4,\n    styles: {\n      width: 2,\n      color: '#2b2a49'\n    }\n  },\n  labels: {\n    enable: true,\n    offset: 15,\n    styles: {\n      fontSize: 14,\n      color: '#ffffff'\n    }\n  },\n  data: {\n    line: {\n      styles: {\n        width: 2\n      }\n    },\n    dots: {\n      enable: true,\n      styles: {\n        width: 3,\n        hover: {\n          width: 5\n        }\n      },\n    }\n  }\n};\n","import {\n  generateRandomColor,\n  getPointOnArc,\n  intersectionPolygon,\n  colorChangeTone,\n} from '../../common';\nimport defaultSettings from './defaultSettings';\nimport Chart from '../chart';\n\nexport default class Example extends Chart {\n  constructor(props) {\n    props.defaultSettings = defaultSettings;\n    super(props);\n  }\n  prepareData(data = {}) {\n    let labels = data.labels;\n    data.datasets.forEach((item, parentIndex) => {\n      item.color = item.color || generateRandomColor();\n      item.state = item.state || 0;\n      if (item.values.length > labels.length)\n        item.values.length = labels.length;\n      if (item.values.length < labels.length) {\n        for (let i = item.values.length; i < labels.length; i++) {\n          item.values.push(0);\n        }\n      }\n      item.values = item.values.map((value, index) => {\n        return {\n          value,\n          parentIndex,\n          index,\n        };\n      });\n    });\n    return data;\n  }\n  getCoords() {\n    let { canvas, settings, data } = this,\n      { context, element } = canvas,\n      width = Math.min(\n        element.clientHeight - settings.offset.top - settings.offset.bottom,\n        element.clientWidth - settings.offset.left - settings.offset.right\n      ),\n      x =\n        element.clientWidth / 2 + settings.offset.left - settings.offset.right,\n      y =\n        element.clientHeight / 2 + settings.offset.top - settings.offset.bottom,\n      piStart = -(Math.PI / 2),\n      piPart = (Math.PI * 2) / data.labels.length;\n    return {\n      width,\n      widthHalf: width / 2,\n      x,\n      y,\n      piStart,\n      piPart,\n    };\n  }\n  drawTooltip() {\n    let data = this.data.datasets\n        .map((dataset) => {\n          return dataset.values;\n        })\n        .flat(),\n      { labels } = this.data,\n      hovered = data.filter((item) => {\n        return item.hovered;\n      });\n    if (hovered.length) {\n      super.drawTooltip({\n        title: {\n          text: labels[hovered[0]['index']],\n        },\n        panels: hovered.map((item) => {\n          return {\n            colorPanel: {\n              color: this.data.datasets[item['parentIndex']].color,\n            },\n            texts: [\n              {\n                text: 'Value: ' + item.value,\n              },\n            ],\n            footer: {\n              text: this.data.datasets[item['parentIndex']].name,\n            },\n          };\n        }),\n        render: (obj) => {},\n      });\n    }\n  }\n  drawScheme() {\n    let { canvas, settings, data, cursor, type, state } = this,\n      { context, element } = canvas,\n      { scheme } = settings,\n      coords = this.getCoords();\n    for (let i = 0; i <= data.labels.length - 1; i++) {\n      let point = getPointOnArc(\n        coords.x,\n        coords.y,\n        coords.widthHalf,\n        coords.piStart + coords.piPart * i\n      );\n      context.strokeStyle = scheme.styles.color;\n      context.lineWidth = scheme.styles.width;\n      context.beginPath();\n      context.moveTo(coords.x, coords.y);\n      context.lineTo(point.x, point.y);\n      context.fill();\n      context.stroke();\n      for (let l = 0; l <= scheme.count; l++) {\n        let partSliceWidth = coords.widthHalf / scheme.count;\n        let currentPoint = getPointOnArc(\n            coords.x,\n            coords.y,\n            coords.widthHalf - partSliceWidth * l,\n            coords.piStart + coords.piPart * i\n          ),\n          prevPoint = getPointOnArc(\n            coords.x,\n            coords.y,\n            coords.widthHalf - partSliceWidth * l,\n            coords.piStart + coords.piPart * (i - 1)\n          );\n        context.beginPath();\n        context.moveTo(currentPoint.x, currentPoint.y);\n        context.lineTo(prevPoint.x, prevPoint.y);\n        context.fill();\n        context.stroke();\n      }\n    }\n  }\n  drawLabels() {\n    let { canvas, settings, data, cursor, type, state } = this,\n      { context, element } = canvas,\n      { labels } = settings,\n      coords = this.getCoords();\n    for (let i = 0; i <= data.labels.length - 1; i++) {\n      if (labels.enable) {\n        context.save();\n        let point = getPointOnArc(\n          coords.x,\n          coords.y,\n          coords.widthHalf + labels.offset,\n          coords.piStart + coords.piPart * i\n        );\n        let label = data.labels[i] || '';\n        context.globalAlpha = 1 * state.loading;\n        context.font =\n          '100 ' + labels.styles.fontSize * state.loading + 'px arial';\n        context.textAlign = (() => {\n          if (point.x > coords.x) return 'left';\n          if (point.x < coords.x) return 'right';\n          return 'center';\n        })();\n        context.textBaseline = 'middle';\n        context.fillStyle = labels.styles.color;\n        context.fillText(label, point.x, point.y);\n        context.restore();\n      }\n    }\n  }\n  drawData() {\n    let { canvas, settings, data, cursor, type, state } = this,\n      { context, element } = canvas,\n      coords = this.getCoords(),\n      flatList = data.datasets\n        .map((data) => {\n          return data.values;\n        })\n        .flat()\n        .map((value) => {\n          return value.value;\n        }),\n      max = Math.max(...flatList);\n\n    for (let i = 0; i <= data.datasets.length - 1; i++) {\n      let dataset = data.datasets[i];\n      context.strokeStyle = dataset.color;\n      context.fillStyle = dataset.color;\n      context.lineWidth = settings.data.line.styles.width;\n      context.beginPath();\n      for (let d = 0; d <= dataset.values.length - 1; d++) {\n        let value = dataset.values[d],\n          percent = value.value / max,\n          point = getPointOnArc(\n            coords.x,\n            coords.y,\n            coords.widthHalf * percent * state.loading,\n            coords.piStart + coords.piPart * d\n          );\n        value.coords = point;\n        d === 0\n          ? context.moveTo(point.x, point.y)\n          : context.lineTo(point.x, point.y);\n      }\n      context.globalAlpha = 0.5;\n      context.fill();\n      context.globalAlpha = 1;\n      context.closePath();\n      context.stroke();\n      for (let d = 0; d <= dataset.values.length - 1; d++) {\n        let value = dataset.values[d],\n          percent = value.value / max,\n          point = getPointOnArc(\n            coords.x,\n            coords.y,\n            coords.widthHalf * percent * state.loading,\n            coords.piStart + coords.piPart * d\n          ),\n          polygon = [\n            {\n              x: coords.x,\n              y: coords.y,\n            },\n            getPointOnArc(\n              coords.x,\n              coords.y,\n              coords.widthHalf,\n              coords.piStart + coords.piPart * d - coords.piPart / 2\n            ),\n            getPointOnArc(\n              coords.x,\n              coords.y,\n              coords.widthHalf,\n              coords.piStart + coords.piPart * d\n            ),\n            getPointOnArc(\n              coords.x,\n              coords.y,\n              coords.widthHalf,\n              coords.piStart + coords.piPart * d + coords.piPart / 2\n            ),\n          ];\n        value.hovered = intersectionPolygon({\n          polygon,\n          x: cursor.x,\n          y: cursor.y,\n        });\n        super.hover({\n          item: value,\n          isHovered: value.hovered,\n        });\n\n        if (settings.data.dots.enable) {\n          let dotSize = settings.data.dots.styles.width * state.loading;\n          if(value.hasOwnProperty('state')) dotSize += (settings.data.dots.styles.hover.width - settings.data.dots.styles.width) * value.state;\n          context.beginPath();\n          context.arc(\n            point.x,\n            point.y,\n            dotSize,\n            0,\n            2 * Math.PI\n          );\n          context.fill();\n          context.closePath();\n          context.stroke();\n        }\n      }\n    }\n  }\n  render(info = {}) {\n    let time = 300;\n    if (this.renderTimeout) clearTimeout(this.renderTimeout);\n    this.renderTimeout = setTimeout(() => {\n      super.baseRender();\n      this.drawScheme();\n      this.drawLabels();\n      this.drawData();\n      this.drawTooltip();\n    }, time / 60);\n  }\n}\n","export default {\n  offset: {\n    top: 30,\n    right: 30,\n    bottom: 30,\n    left: 30,\n  },\n  label: {\n    enable: true,\n    styles: {\n      fontSize: 14,\n      color: '#fff',\n    },\n  },\n  value: {\n    enable: true,\n    styles: {\n      fontSize: 14,\n      color: '#fff',\n    },\n  },\n  area: {\n    gradient: false,\n    smooth: true\n  },\n  hover: {\n    enable: true,\n    value: 15\n  }\n};\n","import {\n  generateRandomColor,\n  intersectionPolygon,\n  colorChangeTone,\n  hexAverage,\n} from '../../common';\nimport defaultSettings from './defaultSettings';\nimport Chart from '../chart';\n\nexport default class Example extends Chart {\n  constructor(props) {\n    props.defaultSettings = defaultSettings;\n    super(props);\n  }\n  prepareData(data = []) {\n    data.forEach((item) => {\n      item.color = item.color || generateRandomColor();\n      item.state = item.state || 0;\n    });\n    return data;\n  }\n  drawTooltip() {\n    let { data } = this,\n      hovered = data.find((item) => {\n        return item.hovered;\n      });\n    if (hovered) {\n      super.drawTooltip({\n        title: {\n          text: hovered.label,\n        },\n        panels: [\n          {\n            colorPanel: {\n              color: hovered.color,\n            },\n            texts: [\n              {\n                text: 'Value: ' + hovered.value,\n              },\n            ],\n          },\n        ],\n        render: (obj) => {},\n      });\n    }\n  }\n  getDrawRect() {\n    let { canvas, settings, data } = this,\n      { element } = canvas,\n      result = {\n        xStart: settings.offset.left,\n        xEnd: element.clientWidth - settings.offset.right,\n        yStart: settings.offset.top,\n        yEnd: element.clientHeight - settings.offset.bottom,\n      };\n    result.width = result.xEnd - result.xStart;\n    result.height = result.yEnd - result.yStart;\n    result.center = result.xStart + result.width / 2;\n    result.partHeight = result.height / data.length;\n    return result;\n  }\n  drawFunnel() {\n    let { canvas, settings, data, cursor, type, state } = this,\n      { context, element } = canvas,\n      max = Math.max(...data.map((item) => item.value)),\n      rect = this.getDrawRect();\n    data = this.prepareData(data);\n    let bezierLeft = [],\n      bezierRight = [];\n    for (let i = 0; i <= data.length - 1; i++) {\n      let item = data[i],\n        nextItem = data[i + 1],\n        prevItem = data[i - 1],\n        yStart = rect.yStart + rect.partHeight * i,\n        yEnd = yStart + rect.partHeight,\n        width = (item.value / max) * rect.width,\n        nextWidth = nextItem ? (nextItem.value / max) * rect.width : width;\n      width *= state.loading;\n      nextWidth *= state.loading;\n      context.beginPath();\n      context.strokeStyle = 'transparent';\n      let color = colorChangeTone(\n        item.color,\n        settings.hover.enable && item.state\n          ? settings.hover.value * item.state\n          : 1\n      );\n      if (settings.area?.gradient) {\n        let nextColor = nextItem\n            ? colorChangeTone(\n                nextItem.color,\n                settings.hover.enable && nextItem.state\n                  ? settings.hover.value * nextItem.state\n                  : 1\n              )\n            : color,\n          prevColor = prevItem\n            ? colorChangeTone(\n                prevItem.color,\n                settings.hover.enable && prevItem.state\n                  ? settings.hover.value * prevItem.state\n                  : 1\n              )\n            : color,\n          gradient = context.createLinearGradient(0, yStart, 0, yEnd);\n        gradient.addColorStop(0, hexAverage([prevColor, color]));\n        gradient.addColorStop(0.3, color);\n        gradient.addColorStop(0.7, color);\n        gradient.addColorStop(1, hexAverage([color, nextColor]));\n        color = gradient;\n      }\n      context.fillStyle = context.strokeStyle = color;\n      let polygon = [\n        {\n          x: rect.center - width / 2,\n          y: yStart,\n        },\n        {\n          x: rect.center - nextWidth / 2,\n          y: yEnd,\n        },\n        {\n          x: rect.center + nextWidth / 2,\n          y: yEnd,\n        },\n        {\n          x: rect.center + width / 2,\n          y: yStart,\n        },\n      ];\n      if (!i) {\n        bezierLeft.push([polygon[0].x, polygon[0].y]);\n        bezierRight.push([polygon[3].x, polygon[3].y]);\n      }\n      bezierLeft.push([polygon[1].x, polygon[1].y]);\n      bezierRight.push([polygon[2].x, polygon[2].y]);\n      for (let p = 0; p <= polygon.length - 1; p++) {\n        if (p === 0) context.moveTo(polygon[p].x, polygon[p].y);\n        else context.lineTo(polygon[p].x, polygon[p].y);\n      }\n      context.fill();\n      context.closePath();\n      context.stroke();\n\n      item.hovered = intersectionPolygon({\n        polygon,\n        x: cursor.x,\n        y: cursor.y,\n      });\n      super.hover({\n        item: item,\n        isHovered: item.hovered,\n      });\n\n      context.save();\n\n      let x = rect.center,\n        y = yEnd - (yEnd - yStart) / 2;\n      context.globalAlpha = 1 * state.loading;\n      if (settings.label?.enable) {\n        context.font =\n          '100 ' + settings.label.styles.fontSize * state.loading + 'px arial';\n        context.fillStyle = settings.label.styles.color;\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.fillText(\n          item.label,\n          x,\n          yStart + settings.label.styles.fontSize + 5\n        );\n      }\n      if (settings.value?.enable) {\n        context.font =\n          '100 ' + settings.value.styles.fontSize * state.loading + 'px arial';\n        context.fillStyle = settings.value.styles.color;\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.fillText(item.value, x, y);\n      }\n      context.restore();\n    }\n    bezierRight.reverse();\n  }\n  render(info = {}) {\n    let time = 300;\n    if (this.renderTimeout) clearTimeout(this.renderTimeout);\n    this.renderTimeout = setTimeout(() => {\n      super.baseRender();\n      this.drawFunnel();\n      this.drawTooltip();\n    }, time / 60);\n  }\n}\n","export default {\n  count:10,\n  top: {\n    count: 10,\n  },\n  styles: {\n    width: 2,\n    color: '#2b2a49',\n  },\n  offset: {\n    top: 30,\n    right: 30,\n    bottom: 30,\n    left: 30,\n  },\n};\n","import defaultSettings from './defaultSettings';\nimport Chart from '../chart';\n\nimport {\n  generateRandomColor,\n  getPointOnArc,\n  intersectionPolygon,\n  colorChangeTone,\n} from '../../common';\n\nexport default class Example extends Chart {\n  constructor(props) {\n    props.defaultSettings = defaultSettings;\n    super(props);\n    this.generateData();\n  }\n  getCoords() {\n    let { canvas, settings } = this,\n      { context, element } = canvas,\n      width = Math.min(\n        element.clientHeight - settings.offset.top - settings.offset.bottom,\n        element.clientWidth - settings.offset.left - settings.offset.right\n      ),\n      x =\n        element.clientWidth / 2 + settings.offset.left - settings.offset.right,\n      y =\n        element.clientHeight / 2 + settings.offset.top - settings.offset.bottom,\n      piStart = -(Math.PI / 2),\n      piPart = (Math.PI * 2) / settings.top.count;\n\n    return {\n      width,\n      widthHalf: width / 2,\n      x,\n      y,\n      piStart,\n      piPart,\n    };\n  }\n  drawTooltip() {}\n  draw() {\n    const { canvas, settings, state } = this;\n    const { styles, count, top } = settings;\n    const { context } = canvas;\n    const coords = this.getCoords();\n    context.strokeStyle = styles.color;\n    context.lineWidth = styles.width;\n\n    for (let i = 0; i <= this.data.length - 1; i++) {\n      context.drawCurve(\n        this.data[i].map((value, index) =>\n          getPointOnArc(\n            coords.x,\n            coords.y,\n            value * state.loading,\n            coords.piStart + coords.piPart * index\n          )\n        ),\n        {\n          closePath: true,\n        }\n      );\n    }\n  }\n\n  generateData() {\n    this.data = [];\n    const { canvas, settings } = this;\n    const { styles, count, top } = settings;\n    const coords = this.getCoords();\n\n    const basePoints = new Array(top.count).fill(0).map(() => (coords.widthHalf * Math.min(1, Math.random() + 0.5)))\n\n    for (let i = 0; i <= count - 1; i++) {\n      const points = basePoints.map((point) => {\n        return point - i * 10\n      });\n\n      this.data.push(points);\n    }\n  }\n\n  morph() {\n    // const delta = 1 * (Math.random() >= 0.5 ? 1 : -1);\n    this.data = this.data.map((circle) => circle.map((point) => {\n      return point;\n    }))\n    this.render();\n  }\n\n  render(info = {}) {\n    let time = 300;\n    if (this.renderTimeout) clearTimeout(this.renderTimeout);\n    this.renderTimeout = setTimeout(() => {\n      super.baseRender();\n      this.draw();\n      // this.morph();\n      this.drawTooltip();\n    }, time / 60);\n  }\n}\n","import { Plot, Donut, Pie, Radar, Funnel, Spectr } from '../Chart';\nexport { Plot, Donut, Pie, Radar, Funnel, Spectr };\nexport default { Plot, Donut, Pie, Radar, Funnel, Spectr };\nwindow.bChart = {\n  Plot,\n  Donut,\n  Pie,\n  Radar,\n  Funnel,\n  Spectr,\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","hexAverage","colors","reduce","previousValue","currentValue","replace","match","map","index","parseInt","numberString","Math","floor","length","toString","deepMerge","obj1","obj2","p","constructor","e","deepClone","r","Array","i","generateRandomColor","color","random","getPointOnArc","x","y","radius","angle","cos","sin","colorChangeTone","amount","min","max","substr","prepareColor","nextColor","intersectionPolygon","polygon","inside","j","xi","yi","xj","yj","Date","formatting","format","yyyy","this","getFullYear","mm","getMonth","dd","getDate","hh","getHours","ii","getMinutes","ss","getSeconds","CanvasRenderingContext2D","roundRect","w","h","beginPath","moveTo","arcTo","closePath","drawCurve","points","config","push","quadraticCurveTo","lastPoint","stroke","drawLineCurve","dx1","dy1","dx2","dy2","prevPoint","currentPoint","nextPoint","a","b","bezierCurveTo","offset","top","right","bottom","left","grid","enable","styles","background","borderColor","borderRadius","borderWidth","horizontal","step","vertical","labels","fontSize","values","digits","count","data","line","dots","width","hover","lineWidth","bar","animated","view","tooltip","padding","Chart","props","canvas","defaultSettings","settings","actions","type","element","context","getContext","isCanvas","Element","HTMLDocument","tagName","toLowerCase","cursor","commonDefaultSettings","timeStamp","setSettings","state","loading","prepareData","commonInit","newSettings","render","from","getSettings","setData","getData","setRatio","ratio","window","devicePixelRatio","clientWidth","height","clientHeight","scale","clearCanvas","clearRect","setTimeout","commonListeners","addEventListener","elementOffset","getBoundingClientRect","clientX","clientY","drawTooltip","title","panels","font","textAlign","textBaseline","text","measureText","forEach","panel","prevWidth","colorPanel","texts","currentWidth","footer","panelsWidth","acc","panelWidth","minCount","oversizeWidth","center","topOffset","invert","fillStyle","strokeStyle","fill","lineTo","fillText","save","rect","restore","func","box","drawBackground","fillRect","item","isHovered","baseRender","Plot","super","maxLength","datasets","dataset","current","countDiff","name","label","bars","filter","initialValue","drawRect","getDrawRect","partWidth","getInterpolation","percent","drawGrid","dash","setLineDash","horizonalArray","horizontalStep","horizontalStepPx","yStart","horizontalStyles","verticalArray","verticalStep","verticalStepPx","xStart","verticalStyles","drawLabels","viewRect","start","isFinite","xEnd","getDatasets","getAllValues","drawValues","allValues","stepDiff","toFixed","drawData","toUpperCase","drawLINE","gridRect","smooth","drawStart","isFirst","isLast","area","yEnd","checkIsHovered","lineJoin","arc","PI","drawBAR","barWidth","y0","bool","hovered","info","renderTimeout","clearTimeout","time","volumed","slicePercent","Slices","total","parseFloat","generatePolygon","sliceWidth","startPi","endPi","temp","drawSlices","sideSize","piOffset","hoveredValue","mouseInPath","ring","volumeRadius","volumeWidth","percentRadius","pointText","point","find","Donut","Slice","Pie","scheme","Example","parentIndex","getCoords","widthHalf","piStart","piPart","flat","drawScheme","coords","l","partSliceWidth","globalAlpha","flatList","d","dotSize","gradient","result","partHeight","drawFunnel","bezierLeft","bezierRight","nextItem","prevItem","nextWidth","prevColor","createLinearGradient","addColorStop","reverse","generateData","draw","basePoints","morph","circle","Radar","Funnel","Spectr","bChart"],"sourceRoot":""}